Help on module libtorrent:

NAME
    libtorrent

CLASSES
    Boost.Python.enum(builtins.int)
        add_piece_flags_t
        add_torrent_params_flags_t
        bandwidth_mixed_algo_t
        choking_algorithm_t
        create_torrent_flags_t
        deadline_flags
        disk_cache_algo_t
        enc_level
        enc_policy
        file_flags_t
        file_progress_flags
        io_buffer_mode_t
        kind
        listen_failed_alert_socket_type_t
        listen_on_flags_t
        listen_succeded_alert_socket_type_t
        metric_type_t
        move_flags_t
        options_t
        pause_flags_t
        performance_warning_t
        protocol_type
        proxy_type
        proxy_type_t
        reannounce_flags_t
        save_resume_flags_t
        save_state_flags_t
        seed_choking_algorithm_t
        session_flags_t
        socket_type_t
        stats_channel
        status_flags_t
        storage_mode_t
        suggest_mode_t
        tracker_source
    Boost.Python.instance(builtins.object)
        alert
            dht_announce_alert
            dht_get_peers_alert
            dht_get_peers_reply_alert
            dht_immutable_item_alert
            dht_mutable_item_alert
            dht_outgoing_get_peers_alert
            dht_put_alert
            dht_stats_alert
            external_ip_alert
            i2p_alert
            incoming_connection_alert
            listen_failed_alert
            listen_succeeded_alert
            log_alert
            lsd_error_alert
            peer_blocked_alert
            portmap_alert
            portmap_error_alert
            portmap_log_alert
            session_stats_alert
            state_update_alert
            torrent_alert
                add_torrent_alert
                anonymous_mode_alert
                cache_flushed_alert
                fastresume_rejected_alert
                file_completed_alert
                file_error_alert
                file_rename_failed_alert
                file_renamed_alert
                hash_failed_alert
                metadata_failed_alert
                metadata_received_alert
                peer_alert
                    block_downloading_alert
                    block_finished_alert
                    block_timeout_alert
                    invalid_request_alert
                    peer_ban_alert
                    peer_connect_alert
                    peer_disconnected_alert
                    peer_error_alert
                    peer_log_alert
                    peer_snubbed_alert
                    peer_unsnubbed_alert
                    picker_log_alert
                    request_dropped_alert
                    unwanted_block_alert
                performance_alert
                piece_finished_alert
                read_piece_alert
                save_resume_data_alert
                save_resume_data_failed_alert
                state_changed_alert
                stats_alert
                storage_moved_alert
                storage_moved_failed_alert
                torrent_added_alert
                torrent_checked_alert
                torrent_delete_failed_alert
                torrent_deleted_alert
                torrent_error_alert
                torrent_finished_alert
                torrent_log_alert
                torrent_need_cert_alert
                torrent_paused_alert
                torrent_removed_alert
                torrent_resumed_alert
                torrent_update_alert
                tracker_alert
                    dht_reply_alert
                    scrape_failed_alert
                    scrape_reply_alert
                    tracker_announce_alert
                    tracker_error_alert
                    tracker_reply_alert
                    tracker_warning_alert
                url_seed_alert
            udp_error_alert
        announce_entry
        cache_status
        create_torrent
        dht_lookup
        dht_settings
        error_category
        error_code
        feed_handle
        file_entry
        file_slice
        file_storage
        fingerprint
        ip_filter
        pe_settings
        peer_class_type_filter
        peer_info
        peer_request
        pool_file_status
        proxy_settings
        session
        session_settings
        session_status
        sha1_hash
        stats_metric
        torrent_handle
        torrent_info
        torrent_status
    
    class add_piece_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      add_piece_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'overwrite_existing': libtorrent.add_piece_flags_t.overwrite_...
     |  
     |  overwrite_existing = libtorrent.add_piece_flags_t.overwrite_existing
     |  
     |  values = {1: libtorrent.add_piece_flags_t.overwrite_existing}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class add_torrent_alert(torrent_alert)
     |  Method resolution order:
     |      add_torrent_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  params
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class add_torrent_params_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      add_torrent_params_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  default_flags = libtorrent.add_torrent_params_flags_t.default_flags
     |  
     |  flag_apply_ip_filter = libtorrent.add_torrent_params_flags_t.flag_appl...
     |  
     |  flag_auto_managed = libtorrent.add_torrent_params_flags_t.flag_auto_ma...
     |  
     |  flag_duplicate_is_error = libtorrent.add_torrent_params_flags_t.flag_d...
     |  
     |  flag_merge_resume_http_seeds = libtorrent.add_torrent_params_flags_t.f...
     |  
     |  flag_merge_resume_trackers = libtorrent.add_torrent_params_flags_t.fla...
     |  
     |  flag_override_resume_data = libtorrent.add_torrent_params_flags_t.flag...
     |  
     |  flag_paused = libtorrent.add_torrent_params_flags_t.flag_paused
     |  
     |  flag_seed_mode = libtorrent.add_torrent_params_flags_t.flag_seed_mode
     |  
     |  flag_sequential_download = libtorrent.add_torrent_params_flags_t.flag_...
     |  
     |  flag_share_mode = libtorrent.add_torrent_params_flags_t.flag_share_mod...
     |  
     |  flag_stop_when_ready = libtorrent.add_torrent_params_flags_t.flag_stop...
     |  
     |  flag_super_seeding = libtorrent.add_torrent_params_flags_t.flag_super_...
     |  
     |  flag_update_subscribe = libtorrent.add_torrent_params_flags_t.flag_upd...
     |  
     |  flag_upload_mode = libtorrent.add_torrent_params_flags_t.flag_upload_m...
     |  
     |  flag_use_resume_save_path = libtorrent.add_torrent_params_flags_t.flag...
     |  
     |  names = {'default_flags': libtorrent.add_torrent_params_flags_t.defaul...
     |  
     |  values = {1: libtorrent.add_torrent_params_flags_t.flag_seed_mode, 2: ...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class alert(Boost.Python.instance)
     |  Method resolution order:
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class announce_entry(Boost.Python.instance)
     |  Method resolution order:
     |      announce_entry
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  can_announce(...)
     |      can_announce( (announce_entry)arg1, (bool)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool can_announce(libtorrent::announce_entry,bool)
     |  
     |  is_working(...)
     |      is_working( (announce_entry)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_working(libtorrent::announce_entry {lvalue})
     |  
     |  min_announce_in(...)
     |      min_announce_in( (announce_entry)arg1) -> int :
     |      
     |          C++ signature :
     |              int min_announce_in(libtorrent::announce_entry {lvalue})
     |  
     |  next_announce_in(...)
     |      next_announce_in( (announce_entry)arg1) -> int :
     |      
     |          C++ signature :
     |              int next_announce_in(libtorrent::announce_entry {lvalue})
     |  
     |  reset(...)
     |      reset( (announce_entry)arg1) -> None :
     |      
     |          C++ signature :
     |              void reset(libtorrent::announce_entry {lvalue})
     |  
     |  trim(...)
     |      trim( (announce_entry)arg1) -> None :
     |      
     |          C++ signature :
     |              void trim(libtorrent::announce_entry {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  complete_sent
     |  
     |  fails
     |  
     |  last_error
     |  
     |  message
     |  
     |  min_announce
     |  
     |  next_announce
     |  
     |  scrape_complete
     |  
     |  scrape_downloaded
     |  
     |  scrape_incomplete
     |  
     |  send_stats
     |  
     |  source
     |  
     |  start_sent
     |  
     |  trackerid
     |  
     |  updating
     |  
     |  verified
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  fail_limit
     |  
     |  tier
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 168
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class anonymous_mode_alert(torrent_alert)
     |  Method resolution order:
     |      anonymous_mode_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  kind
     |  
     |  str
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class bandwidth_mixed_algo_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      bandwidth_mixed_algo_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'peer_proportional': libtorrent.bandwidth_mixed_algo_t.peer_p...
     |  
     |  peer_proportional = libtorrent.bandwidth_mixed_algo_t.peer_proportiona...
     |  
     |  prefer_tcp = libtorrent.bandwidth_mixed_algo_t.prefer_tcp
     |  
     |  values = {0: libtorrent.bandwidth_mixed_algo_t.prefer_tcp, 1: libtorre...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    big_number = class sha1_hash(Boost.Python.instance)
     |  Method resolution order:
     |      sha1_hash
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __eq__(...)
     |      __eq__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __eq__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __hash__(...)
     |      __hash__( (object)arg1) -> int :
     |      
     |          C++ signature :
     |              long __hash__(boost::python::api::object)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |      
     |      __init__( (object)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  __lt__(...)
     |      __lt__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __lt__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __ne__(...)
     |      __ne__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __ne__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __str__(...)
     |      __str__( (sha1_hash)arg1) -> object :
     |      
     |          C++ signature :
     |              _object* __str__(libtorrent::sha1_hash {lvalue})
     |  
     |  clear(...)
     |      clear( (sha1_hash)arg1) -> None :
     |      
     |          C++ signature :
     |              void clear(libtorrent::sha1_hash {lvalue})
     |  
     |  is_all_zeros(...)
     |      is_all_zeros( (sha1_hash)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_all_zeros(libtorrent::sha1_hash {lvalue})
     |  
     |  to_bytes(...)
     |      to_bytes( (sha1_hash)arg1) -> object :
     |      
     |          C++ signature :
     |              bytes to_bytes(libtorrent::sha1_hash)
     |  
     |  to_string(...)
     |      to_string( (sha1_hash)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_string(libtorrent::sha1_hash {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 40
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class block_downloading_alert(peer_alert)
     |  Method resolution order:
     |      block_downloading_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  block_index
     |  
     |  peer_speedmsg
     |  
     |  piece_index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class block_finished_alert(peer_alert)
     |  Method resolution order:
     |      block_finished_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  block_index
     |  
     |  piece_index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class block_timeout_alert(peer_alert)
     |  Method resolution order:
     |      block_timeout_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  block_index
     |  
     |  piece_index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class cache_flushed_alert(torrent_alert)
     |  Method resolution order:
     |      cache_flushed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class cache_status(Boost.Python.instance)
     |  Method resolution order:
     |      cache_status
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  arc_mfu_ghost_size
     |  
     |  arc_mfu_size
     |  
     |  arc_mru_ghost_size
     |  
     |  arc_mru_size
     |  
     |  average_hash_time
     |  
     |  average_job_time
     |  
     |  average_read_time
     |  
     |  average_write_time
     |  
     |  blocked_jobs
     |  
     |  blocks_read
     |  
     |  blocks_read_hit
     |  
     |  blocks_written
     |  
     |  cache_size
     |  
     |  cumulative_hash_time
     |  
     |  cumulative_job_time
     |  
     |  cumulative_read_time
     |  
     |  cumulative_write_time
     |  
     |  num_jobs
     |  
     |  num_read_jobs
     |  
     |  num_write_jobs
     |  
     |  peak_queued
     |  
     |  pending_jobs
     |  
     |  pieces
     |  
     |  pinned_blocks
     |  
     |  queued_bytes
     |  
     |  queued_jobs
     |  
     |  read_cache_size
     |  
     |  read_queue_size
     |  
     |  reads
     |  
     |  total_read_back
     |  
     |  total_used_buffers
     |  
     |  write_cache_size
     |  
     |  writes
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 272
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class choking_algorithm_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      choking_algorithm_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  auto_expand_choker = libtorrent.choking_algorithm_t.auto_expand_choker
     |  
     |  bittyrant_choker = libtorrent.choking_algorithm_t.bittyrant_choker
     |  
     |  fixed_slots_choker = libtorrent.choking_algorithm_t.fixed_slots_choker
     |  
     |  names = {'auto_expand_choker': libtorrent.choking_algorithm_t.auto_exp...
     |  
     |  rate_based_choker = libtorrent.choking_algorithm_t.rate_based_choker
     |  
     |  values = {0: libtorrent.choking_algorithm_t.fixed_slots_choker, 2: lib...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class create_torrent(Boost.Python.instance)
     |  Method resolution order:
     |      create_torrent
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (file_storage)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,libtorrent::file_storage {lvalue})
     |      
     |      __init__( (object)arg1, (torrent_info)ti [, (bool)use_preformatted=False]) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,libtorrent::torrent_info [,bool=False])
     |      
     |      __init__( (object)arg1, (file_storage)storage [, (int)piece_size=0 [, (int)pad_file_limit=-1 [, (int)flags=1]]]) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,libtorrent::file_storage {lvalue} [,int=0 [,int=-1 [,int=1]]])
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  add_http_seed(...)
     |      add_http_seed( (create_torrent)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void add_http_seed(libtorrent::create_torrent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  add_node(...)
     |      add_node( (create_torrent)arg1, (str)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void add_node(libtorrent::create_torrent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,int)
     |  
     |  add_tracker(...)
     |      add_tracker( (create_torrent)arg1, (str)announce_url [, (int)tier=0]) -> None :
     |      
     |          C++ signature :
     |              void add_tracker(libtorrent::create_torrent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,int=0])
     |  
     |  add_url_seed(...)
     |      add_url_seed( (create_torrent)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void add_url_seed(libtorrent::create_torrent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  files(...)
     |      files( (create_torrent)arg1) -> file_storage :
     |      
     |          C++ signature :
     |              libtorrent::file_storage files(libtorrent::create_torrent {lvalue})
     |  
     |  generate(...)
     |      generate( (create_torrent)arg1) -> object :
     |      
     |          C++ signature :
     |              libtorrent::entry generate(libtorrent::create_torrent {lvalue})
     |  
     |  num_pieces(...)
     |      num_pieces( (create_torrent)arg1) -> int :
     |      
     |          C++ signature :
     |              int num_pieces(libtorrent::create_torrent {lvalue})
     |  
     |  piece_length(...)
     |      piece_length( (create_torrent)arg1) -> int :
     |      
     |          C++ signature :
     |              int piece_length(libtorrent::create_torrent {lvalue})
     |  
     |  piece_size(...)
     |      piece_size( (create_torrent)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              int piece_size(libtorrent::create_torrent {lvalue},int)
     |  
     |  priv(...)
     |      priv( (create_torrent)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool priv(libtorrent::create_torrent {lvalue})
     |  
     |  set_comment(...)
     |      set_comment( (create_torrent)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_comment(libtorrent::create_torrent {lvalue},char const*)
     |  
     |  set_creator(...)
     |      set_creator( (create_torrent)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_creator(libtorrent::create_torrent {lvalue},char const*)
     |  
     |  set_file_hash(...)
     |      set_file_hash( (create_torrent)arg1, (int)arg2, (object)arg3) -> None :
     |      
     |          C++ signature :
     |              void set_file_hash(libtorrent::create_torrent {lvalue},int,bytes)
     |  
     |  set_hash(...)
     |      set_hash( (create_torrent)arg1, (int)arg2, (object)arg3) -> None :
     |      
     |          C++ signature :
     |              void set_hash(libtorrent::create_torrent {lvalue},int,bytes)
     |  
     |  set_priv(...)
     |      set_priv( (create_torrent)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_priv(libtorrent::create_torrent {lvalue},bool)
     |  
     |  set_root_cert(...)
     |      set_root_cert( (create_torrent)arg1, (str)pem) -> None :
     |      
     |          C++ signature :
     |              void set_root_cert(libtorrent::create_torrent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class create_torrent_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      create_torrent_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  merkle = libtorrent.create_torrent_flags_t.merkle
     |  
     |  modification_time = libtorrent.create_torrent_flags_t.modification_tim...
     |  
     |  names = {'merkle': libtorrent.create_torrent_flags_t.merkle, 'modifica...
     |  
     |  optimize = libtorrent.create_torrent_flags_t.optimize
     |  
     |  optimize_alignment = libtorrent.create_torrent_flags_t.optimize_alignm...
     |  
     |  symlinks = libtorrent.create_torrent_flags_t.symlinks
     |  
     |  values = {1: libtorrent.create_torrent_flags_t.optimize_alignment, 2: ...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class deadline_flags(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      deadline_flags
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  alert_when_available = libtorrent.deadline_flags.alert_when_available
     |  
     |  names = {'alert_when_available': libtorrent.deadline_flags.alert_when_...
     |  
     |  values = {1: libtorrent.deadline_flags.alert_when_available}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class dht_announce_alert(alert)
     |  Method resolution order:
     |      dht_announce_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  info_hash
     |  
     |  ip
     |  
     |  port
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_get_peers_alert(alert)
     |  Method resolution order:
     |      dht_get_peers_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  info_hash
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_get_peers_reply_alert(alert)
     |  Method resolution order:
     |      dht_get_peers_reply_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  num_peers(...)
     |      num_peers( (dht_get_peers_reply_alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int num_peers(libtorrent::dht_get_peers_reply_alert {lvalue})
     |  
     |  peers(...)
     |      peers( (dht_get_peers_reply_alert)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list peers(libtorrent::dht_get_peers_reply_alert)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  info_hash
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_immutable_item_alert(alert)
     |  Method resolution order:
     |      dht_immutable_item_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  item
     |  
     |  target
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_lookup(Boost.Python.instance)
     |  Method resolution order:
     |      dht_lookup
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  branch_factor
     |  
     |  outstanding_requests
     |  
     |  response
     |  
     |  timeouts
     |  
     |  type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 56
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_mutable_item_alert(alert)
     |  Method resolution order:
     |      dht_mutable_item_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  authoritative
     |  
     |  item
     |  
     |  key
     |  
     |  salt
     |  
     |  seq
     |  
     |  signature
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_outgoing_get_peers_alert(alert)
     |  Method resolution order:
     |      dht_outgoing_get_peers_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  info_hash
     |  
     |  ip
     |  
     |  obfuscated_info_hash
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_put_alert(alert)
     |  Method resolution order:
     |      dht_put_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  num_success
     |  
     |  public_key
     |  
     |  salt
     |  
     |  seq
     |  
     |  signature
     |  
     |  target
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_reply_alert(tracker_alert)
     |  Method resolution order:
     |      dht_reply_alert
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  num_peers
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tracker_alert:
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from tracker_alert:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_settings(Boost.Python.instance)
     |  Method resolution order:
     |      dht_settings
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  aggressive_lookups
     |  
     |  block_ratelimit
     |  
     |  block_timeout
     |  
     |  enforce_node_id
     |  
     |  extended_routing_table
     |  
     |  ignore_dark_internet
     |  
     |  item_lifetime
     |  
     |  max_dht_items
     |  
     |  max_fail_count
     |  
     |  max_peers_reply
     |  
     |  max_torrent_search_reply
     |  
     |  max_torrents
     |  
     |  privacy_lookups
     |  
     |  read_only
     |  
     |  restrict_routing_ips
     |  
     |  restrict_search_ips
     |  
     |  search_branching
     |  
     |  service_port
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 72
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class dht_stats_alert(alert)
     |  Method resolution order:
     |      dht_stats_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  active_requests
     |  
     |  routing_table
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class disk_cache_algo_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      disk_cache_algo_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  avoid_readback = libtorrent.disk_cache_algo_t.avoid_readback
     |  
     |  largest_contiguous = libtorrent.disk_cache_algo_t.largest_contiguous
     |  
     |  lru = libtorrent.disk_cache_algo_t.lru
     |  
     |  names = {'avoid_readback': libtorrent.disk_cache_algo_t.avoid_readback...
     |  
     |  values = {0: libtorrent.disk_cache_algo_t.lru, 1: libtorrent.disk_cach...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class enc_level(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      enc_level
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  both = libtorrent.enc_level.both
     |  
     |  names = {'both': libtorrent.enc_level.both, 'pe_both': libtorrent.enc_...
     |  
     |  pe_both = libtorrent.enc_level.pe_both
     |  
     |  pe_plaintext = libtorrent.enc_level.pe_plaintext
     |  
     |  pe_rc4 = libtorrent.enc_level.pe_rc4
     |  
     |  plaintext = libtorrent.enc_level.plaintext
     |  
     |  rc4 = libtorrent.enc_level.rc4
     |  
     |  values = {1: libtorrent.enc_level.plaintext, 2: libtorrent.enc_level.r...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class enc_policy(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      enc_policy
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  disabled = libtorrent.enc_policy.disabled
     |  
     |  enabled = libtorrent.enc_policy.enabled
     |  
     |  forced = libtorrent.enc_policy.forced
     |  
     |  names = {'disabled': libtorrent.enc_policy.disabled, 'enabled': libtor...
     |  
     |  pe_disabled = libtorrent.enc_policy.pe_disabled
     |  
     |  pe_enabled = libtorrent.enc_policy.pe_enabled
     |  
     |  pe_forced = libtorrent.enc_policy.pe_forced
     |  
     |  values = {0: libtorrent.enc_policy.forced, 1: libtorrent.enc_policy.en...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class error_category(Boost.Python.instance)
     |  Method resolution order:
     |      error_category
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __eq__(...)
     |      __eq__( (error_category)arg1, (error_category)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __eq__(category_holder {lvalue},category_holder)
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __lt__(...)
     |      __lt__( (error_category)arg1, (error_category)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __lt__(category_holder {lvalue},category_holder)
     |  
     |  __ne__(...)
     |      __ne__( (error_category)arg1, (error_category)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __ne__(category_holder {lvalue},category_holder)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  message(...)
     |      message( (error_category)arg1, (int)arg2) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(category_holder {lvalue},int)
     |  
     |  name(...)
     |      name( (error_category)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* name(category_holder {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class error_code(Boost.Python.instance)
     |  Method resolution order:
     |      error_code
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __getinitargs__(...)
     |      __getinitargs__( (error_code)arg1) -> tuple :
     |      
     |          C++ signature :
     |              boost::python::tuple __getinitargs__(boost::system::error_code)
     |  
     |  __getstate__(...)
     |      __getstate__( (error_code)arg1) -> tuple :
     |      
     |          C++ signature :
     |              boost::python::tuple __getstate__(boost::system::error_code)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |      
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |      
     |      __init__( (object)arg1, (int)arg2, (error_category)arg3) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,int,category_holder)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __setstate__(...)
     |      __setstate__( (error_code)arg1, (tuple)arg2) -> None :
     |      
     |          C++ signature :
     |              void __setstate__(boost::system::error_code {lvalue},boost::python::tuple)
     |  
     |  assign(...)
     |      assign( (error_code)arg1, (int)arg2, (error_category)arg3) -> None :
     |      
     |          C++ signature :
     |              void assign(boost::system::error_code {lvalue},int,category_holder)
     |  
     |  category(...)
     |      category( (error_code)arg1) -> error_category :
     |      
     |          C++ signature :
     |              category_holder category(boost::system::error_code)
     |  
     |  clear(...)
     |      clear( (error_code)arg1) -> None :
     |      
     |          C++ signature :
     |              void clear(boost::system::error_code {lvalue})
     |  
     |  message(...)
     |      message( (error_code)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(boost::system::error_code {lvalue})
     |  
     |  value(...)
     |      value( (error_code)arg1) -> int :
     |      
     |          C++ signature :
     |              int value(boost::system::error_code {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  __safe_for_unpickling__ = True
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class external_ip_alert(alert)
     |  Method resolution order:
     |      external_ip_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  external_address
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class fastresume_rejected_alert(torrent_alert)
     |  Method resolution order:
     |      fastresume_rejected_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  file_path(...)
     |      file_path( (fastresume_rejected_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* file_path(libtorrent::fastresume_rejected_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  msg
     |  
     |  operation
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class feed_handle(Boost.Python.instance)
     |  Method resolution order:
     |      feed_handle
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  get_feed_status(...)
     |      get_feed_status( (feed_handle)arg1) -> dict :
     |      
     |          C++ signature :
     |              boost::python::dict get_feed_status(libtorrent::feed_handle)
     |  
     |  set_settings(...)
     |      set_settings( (feed_handle)arg1, (dict)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_settings(libtorrent::feed_handle {lvalue},boost::python::dict)
     |  
     |  settings(...)
     |      settings( (feed_handle)arg1) -> dict :
     |      
     |          C++ signature :
     |              boost::python::dict settings(libtorrent::feed_handle {lvalue})
     |  
     |  update_feed(...)
     |      update_feed( (feed_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void update_feed(libtorrent::feed_handle {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class file_completed_alert(torrent_alert)
     |  Method resolution order:
     |      file_completed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class file_entry(Boost.Python.instance)
     |  Method resolution order:
     |      file_entry
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  executable_attribute
     |  
     |  hidden_attribute
     |  
     |  offset
     |  
     |  pad_file
     |  
     |  size
     |  
     |  symlink_attribute
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  file_base
     |  
     |  filehash
     |  
     |  mtime
     |  
     |  path
     |  
     |  symlink_path
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 136
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class file_error_alert(torrent_alert)
     |  Method resolution order:
     |      file_error_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  filename(...)
     |      filename( (file_error_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* filename(libtorrent::file_error_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  file
     |  
     |  msg
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class file_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      file_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  flag_executable = libtorrent.file_flags_t.flag_executable
     |  
     |  flag_hidden = libtorrent.file_flags_t.flag_hidden
     |  
     |  flag_pad_file = libtorrent.file_flags_t.flag_pad_file
     |  
     |  flag_symlink = libtorrent.file_flags_t.flag_symlink
     |  
     |  names = {'flag_executable': libtorrent.file_flags_t.flag_executable, '...
     |  
     |  values = {1: libtorrent.file_flags_t.flag_pad_file, 2: libtorrent.file...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class file_progress_flags(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      file_progress_flags
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'piece_granularity': libtorrent.file_progress_flags.piece_gra...
     |  
     |  piece_granularity = libtorrent.file_progress_flags.piece_granularity
     |  
     |  values = {1: libtorrent.file_progress_flags.piece_granularity}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class file_rename_failed_alert(torrent_alert)
     |  Method resolution order:
     |      file_rename_failed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class file_renamed_alert(torrent_alert)
     |  Method resolution order:
     |      file_renamed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  new_name(...)
     |      new_name( (file_renamed_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* new_name(libtorrent::file_renamed_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  index
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class file_slice(Boost.Python.instance)
     |  Method resolution order:
     |      file_slice
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  file_index
     |  
     |  offset
     |  
     |  size
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 40
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class file_storage(Boost.Python.instance)
     |  Method resolution order:
     |      file_storage
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __iter__(...)
     |      __iter__( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              boost::python::objects::iterator_range<boost::python::return_value_policy<boost::python::return_by_value, boost::python::default_call_policies>, (anonymous namespace)::FileIter> __iter__(boost::python::back_reference<libtorrent::file_storage const&>)
     |  
     |  __len__(...)
     |      __len__( (file_storage)arg1) -> int :
     |      
     |          C++ signature :
     |              int __len__(libtorrent::file_storage {lvalue})
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  add_file(...)
     |      add_file( (file_storage)arg1, (str)path, (int)size [, (int)flags=0 [, (int)mtime=0 [, (str)linkpath='']]]) -> None :
     |      
     |          C++ signature :
     |              void add_file(libtorrent::file_storage {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,long [,int=0 [,long=0 [,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >='']]])
     |      
     |      add_file( (file_storage)arg1, (str)path, (int)size [, (int)flags=0 [, (int)mtime=0 [, (str)linkpath='']]]) -> None :
     |      
     |          C++ signature :
     |              void add_file(libtorrent::file_storage {lvalue},std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >,long [,int=0 [,long=0 [,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >='']]])
     |      
     |      add_file( (file_storage)arg1, (file_entry)entry) -> None :
     |      
     |          C++ signature :
     |              void add_file(libtorrent::file_storage {lvalue},libtorrent::file_entry)
     |  
     |  at(...)
     |      at( (file_storage)arg1, (int)arg2) -> file_entry :
     |      
     |          C++ signature :
     |              libtorrent::file_entry at(libtorrent::file_storage {lvalue},int)
     |  
     |  file_flags(...)
     |      file_flags( (file_storage)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              int file_flags(libtorrent::file_storage {lvalue},int)
     |  
     |  file_name(...)
     |      file_name( (file_storage)arg1, (int)arg2) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > file_name(libtorrent::file_storage {lvalue},int)
     |  
     |  file_offset(...)
     |      file_offset( (file_storage)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              long file_offset(libtorrent::file_storage {lvalue},int)
     |  
     |  file_path(...)
     |      file_path( (file_storage)arg1, (int)idx [, (str)save_path='']) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > file_path(libtorrent::file_storage {lvalue},int [,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >=''])
     |  
     |  file_size(...)
     |      file_size( (file_storage)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              long file_size(libtorrent::file_storage {lvalue},int)
     |  
     |  hash(...)
     |      hash( (file_storage)arg1, (int)arg2) -> sha1_hash :
     |      
     |          C++ signature :
     |              libtorrent::sha1_hash hash(libtorrent::file_storage {lvalue},int)
     |  
     |  is_valid(...)
     |      is_valid( (file_storage)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_valid(libtorrent::file_storage {lvalue})
     |  
     |  name(...)
     |      name( (file_storage)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name(libtorrent::file_storage {lvalue})
     |  
     |  num_files(...)
     |      num_files( (file_storage)arg1) -> int :
     |      
     |          C++ signature :
     |              int num_files(libtorrent::file_storage {lvalue})
     |  
     |  num_pieces(...)
     |      num_pieces( (file_storage)arg1) -> int :
     |      
     |          C++ signature :
     |              int num_pieces(libtorrent::file_storage {lvalue})
     |  
     |  piece_length(...)
     |      piece_length( (file_storage)arg1) -> int :
     |      
     |          C++ signature :
     |              int piece_length(libtorrent::file_storage {lvalue})
     |  
     |  piece_size(...)
     |      piece_size( (file_storage)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              int piece_size(libtorrent::file_storage {lvalue},int)
     |  
     |  rename_file(...)
     |      rename_file( (file_storage)arg1, (int)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void rename_file(libtorrent::file_storage {lvalue},int,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |      
     |      rename_file( (file_storage)arg1, (int)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void rename_file(libtorrent::file_storage {lvalue},int,std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >)
     |  
     |  set_name(...)
     |      set_name( (file_storage)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_name(libtorrent::file_storage {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |      
     |      set_name( (file_storage)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_name(libtorrent::file_storage {lvalue},std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >)
     |  
     |  set_num_pieces(...)
     |      set_num_pieces( (file_storage)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_num_pieces(libtorrent::file_storage {lvalue},int)
     |  
     |  set_piece_length(...)
     |      set_piece_length( (file_storage)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_piece_length(libtorrent::file_storage {lvalue},int)
     |  
     |  symlink(...)
     |      symlink( (file_storage)arg1, (int)arg2) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > symlink(libtorrent::file_storage {lvalue},int)
     |  
     |  total_size(...)
     |      total_size( (file_storage)arg1) -> int :
     |      
     |          C++ signature :
     |              long total_size(libtorrent::file_storage {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 216
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class fingerprint(Boost.Python.instance)
     |  Method resolution order:
     |      fingerprint
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (str)id, (int)major, (int)minor, (int)revision, (int)tag) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,char const*,int,int,int,int)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __str__(...)
     |      __str__( (fingerprint)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::fingerprint {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  major_version
     |  
     |  minor_version
     |  
     |  name
     |  
     |  revision_version
     |  
     |  tag_version
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class hash_failed_alert(torrent_alert)
     |  Method resolution order:
     |      hash_failed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  piece_index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class i2p_alert(alert)
     |  Method resolution order:
     |      i2p_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class incoming_connection_alert(alert)
     |  Method resolution order:
     |      incoming_connection_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ip
     |  
     |  socket_type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class invalid_request_alert(peer_alert)
     |  Method resolution order:
     |      invalid_request_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  request
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class io_buffer_mode_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      io_buffer_mode_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  disable_os_cache = libtorrent.io_buffer_mode_t.disable_os_cache
     |  
     |  disable_os_cache_for_aligned_files = libtorrent.io_buffer_mode_t.disab...
     |  
     |  enable_os_cache = libtorrent.io_buffer_mode_t.enable_os_cache
     |  
     |  names = {'disable_os_cache': libtorrent.io_buffer_mode_t.disable_os_ca...
     |  
     |  values = {0: libtorrent.io_buffer_mode_t.enable_os_cache, 2: libtorren...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class ip_filter(Boost.Python.instance)
     |  Method resolution order:
     |      ip_filter
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  access(...)
     |      access( (ip_filter)arg1, (str)arg2) -> int :
     |      
     |          C++ signature :
     |              int access(libtorrent::ip_filter {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  add_rule(...)
     |      add_rule( (ip_filter)arg1, (str)arg2, (str)arg3, (int)arg4) -> None :
     |      
     |          C++ signature :
     |              void add_rule(libtorrent::ip_filter {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,int)
     |  
     |  export_filter(...)
     |      export_filter( (ip_filter)arg1) -> object :
     |      
     |          C++ signature :
     |              boost::tuples::tuple<std::vector<libtorrent::ip_range<boost::asio::ip::address_v4>, std::allocator<libtorrent::ip_range<boost::asio::ip::address_v4> > >, std::vector<libtorrent::ip_range<boost::asio::ip::address_v6>, std::allocator<libtorrent::ip_range<boost::asio::ip::address_v6> > >, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type> export_filter(libtorrent::ip_filter {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 112
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class kind(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      kind
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'tracker_no_anonymous': libtorrent.kind.tracker_no_anonymous}
     |  
     |  tracker_no_anonymous = libtorrent.kind.tracker_no_anonymous
     |  
     |  values = {0: libtorrent.kind.tracker_no_anonymous}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class listen_failed_alert(alert)
     |  Method resolution order:
     |      listen_failed_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  listen_interface(...)
     |      listen_interface( (listen_failed_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* listen_interface(libtorrent::listen_failed_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  endpoint
     |  
     |  error
     |  
     |  operation
     |  
     |  sock_type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class listen_failed_alert_socket_type_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      listen_failed_alert_socket_type_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  i2p = libtorrent.listen_failed_alert_socket_type_t.i2p
     |  
     |  names = {'i2p': libtorrent.listen_failed_alert_socket_type_t.i2p, 'soc...
     |  
     |  socks5 = libtorrent.listen_failed_alert_socket_type_t.socks5
     |  
     |  tcp = libtorrent.listen_failed_alert_socket_type_t.tcp
     |  
     |  tcp_ssl = libtorrent.listen_failed_alert_socket_type_t.tcp_ssl
     |  
     |  udp = libtorrent.listen_failed_alert_socket_type_t.udp
     |  
     |  utp_ssl = libtorrent.listen_failed_alert_socket_type_t.utp_ssl
     |  
     |  values = {0: libtorrent.listen_failed_alert_socket_type_t.tcp, 1: libt...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class listen_on_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      listen_on_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  listen_no_system_port = libtorrent.listen_on_flags_t.listen_no_system_...
     |  
     |  listen_reuse_address = libtorrent.listen_on_flags_t.listen_reuse_addre...
     |  
     |  names = {'listen_no_system_port': libtorrent.listen_on_flags_t.listen_...
     |  
     |  values = {1: libtorrent.listen_on_flags_t.listen_reuse_address, 2: lib...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class listen_succeded_alert_socket_type_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      listen_succeded_alert_socket_type_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  i2p = libtorrent.listen_succeded_alert_socket_type_t.i2p
     |  
     |  names = {'i2p': libtorrent.listen_succeded_alert_socket_type_t.i2p, 's...
     |  
     |  socks5 = libtorrent.listen_succeded_alert_socket_type_t.socks5
     |  
     |  tcp = libtorrent.listen_succeded_alert_socket_type_t.tcp
     |  
     |  tcp_ssl = libtorrent.listen_succeded_alert_socket_type_t.tcp_ssl
     |  
     |  udp = libtorrent.listen_succeded_alert_socket_type_t.udp
     |  
     |  utp_ssl = libtorrent.listen_succeded_alert_socket_type_t.utp_ssl
     |  
     |  values = {0: libtorrent.listen_succeded_alert_socket_type_t.tcp, 1: li...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class listen_succeeded_alert(alert)
     |  Method resolution order:
     |      listen_succeeded_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  endpoint
     |  
     |  sock_type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class log_alert(alert)
     |  Method resolution order:
     |      log_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  msg(...)
     |      msg( (log_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* msg(libtorrent::log_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class lsd_error_alert(alert)
     |  Method resolution order:
     |      lsd_error_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class metadata_failed_alert(torrent_alert)
     |  Method resolution order:
     |      metadata_failed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class metadata_received_alert(torrent_alert)
     |  Method resolution order:
     |      metadata_received_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class metric_type_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      metric_type_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  counter = libtorrent.metric_type_t.counter
     |  
     |  gauge = libtorrent.metric_type_t.gauge
     |  
     |  names = {'counter': libtorrent.metric_type_t.counter, 'gauge': libtorr...
     |  
     |  values = {0: libtorrent.metric_type_t.counter, 1: libtorrent.metric_ty...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class move_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      move_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  always_replace_files = libtorrent.move_flags_t.always_replace_files
     |  
     |  dont_replace = libtorrent.move_flags_t.dont_replace
     |  
     |  fail_if_exist = libtorrent.move_flags_t.fail_if_exist
     |  
     |  names = {'always_replace_files': libtorrent.move_flags_t.always_replac...
     |  
     |  values = {0: libtorrent.move_flags_t.always_replace_files, 1: libtorre...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class options_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      options_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  delete_files = libtorrent.options_t.delete_files
     |  
     |  names = {'delete_files': libtorrent.options_t.delete_files}
     |  
     |  values = {1: libtorrent.options_t.delete_files}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class pause_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      pause_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  graceful_pause = libtorrent.pause_flags_t.graceful_pause
     |  
     |  names = {'graceful_pause': libtorrent.pause_flags_t.graceful_pause}
     |  
     |  values = {1: libtorrent.pause_flags_t.graceful_pause}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class pe_settings(Boost.Python.instance)
     |  Method resolution order:
     |      pe_settings
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  allowed_enc_level
     |  
     |  in_enc_policy
     |  
     |  out_enc_policy
     |  
     |  prefer_rc4
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_alert(torrent_alert)
     |  Method resolution order:
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_ban_alert(peer_alert)
     |  Method resolution order:
     |      peer_ban_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_blocked_alert(alert)
     |  Method resolution order:
     |      peer_blocked_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  ip
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_class_type_filter(Boost.Python.instance)
     |  Method resolution order:
     |      peer_class_type_filter
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |      
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  add(...)
     |      add( (peer_class_type_filter)arg1, (socket_type_t)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void add(libtorrent::peer_class_type_filter {lvalue},libtorrent::peer_class_type_filter::socket_type_t,int)
     |  
     |  allow(...)
     |      allow( (peer_class_type_filter)arg1, (socket_type_t)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void allow(libtorrent::peer_class_type_filter {lvalue},libtorrent::peer_class_type_filter::socket_type_t,int)
     |  
     |  apply(...)
     |      apply( (peer_class_type_filter)arg1, (int)arg2, (int)arg3) -> int :
     |      
     |          C++ signature :
     |              unsigned int apply(libtorrent::peer_class_type_filter {lvalue},int,unsigned int)
     |  
     |  disallow(...)
     |      disallow( (peer_class_type_filter)arg1, (socket_type_t)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void disallow(libtorrent::peer_class_type_filter {lvalue},libtorrent::peer_class_type_filter::socket_type_t,int)
     |  
     |  remove(...)
     |      remove( (peer_class_type_filter)arg1, (socket_type_t)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void remove(libtorrent::peer_class_type_filter {lvalue},libtorrent::peer_class_type_filter::socket_type_t,int)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 56
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_connect_alert(peer_alert)
     |  Method resolution order:
     |      peer_connect_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_disconnected_alert(peer_alert)
     |  Method resolution order:
     |      peer_disconnected_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  msg
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_error_alert(peer_alert)
     |  Method resolution order:
     |      peer_error_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    peer_id = class sha1_hash(Boost.Python.instance)
     |  Method resolution order:
     |      sha1_hash
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __eq__(...)
     |      __eq__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __eq__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __hash__(...)
     |      __hash__( (object)arg1) -> int :
     |      
     |          C++ signature :
     |              long __hash__(boost::python::api::object)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |      
     |      __init__( (object)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  __lt__(...)
     |      __lt__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __lt__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __ne__(...)
     |      __ne__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __ne__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __str__(...)
     |      __str__( (sha1_hash)arg1) -> object :
     |      
     |          C++ signature :
     |              _object* __str__(libtorrent::sha1_hash {lvalue})
     |  
     |  clear(...)
     |      clear( (sha1_hash)arg1) -> None :
     |      
     |          C++ signature :
     |              void clear(libtorrent::sha1_hash {lvalue})
     |  
     |  is_all_zeros(...)
     |      is_all_zeros( (sha1_hash)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_all_zeros(libtorrent::sha1_hash {lvalue})
     |  
     |  to_bytes(...)
     |      to_bytes( (sha1_hash)arg1) -> object :
     |      
     |          C++ signature :
     |              bytes to_bytes(libtorrent::sha1_hash)
     |  
     |  to_string(...)
     |      to_string( (sha1_hash)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_string(libtorrent::sha1_hash {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 40
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_info(Boost.Python.instance)
     |  Method resolution order:
     |      peer_info
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  client
     |  
     |  connection_type
     |  
     |  country
     |  
     |  down_speed
     |  
     |  download_limit
     |  
     |  download_queue_length
     |  
     |  download_queue_time
     |  
     |  download_rate_peak
     |  
     |  downloading_block_index
     |  
     |  downloading_piece_index
     |  
     |  downloading_progress
     |  
     |  downloading_total
     |  
     |  estimated_reciprocation_rate
     |  
     |  failcount
     |  
     |  flags
     |  
     |  ip
     |  
     |  last_active
     |  
     |  last_request
     |  
     |  load_balancing
     |  
     |  local_endpoint
     |  
     |  num_hashfails
     |  
     |  num_pieces
     |  
     |  payload_down_speed
     |  
     |  payload_up_speed
     |  
     |  pending_disk_bytes
     |  
     |  pid
     |  
     |  pieces
     |  
     |  progress
     |  
     |  progress_ppm
     |  
     |  queue_bytes
     |  
     |  read_state
     |  
     |  receive_buffer_size
     |  
     |  receive_quota
     |  
     |  remote_dl_rate
     |  
     |  request_timeout
     |  
     |  rtt
     |  
     |  send_buffer_size
     |  
     |  send_quota
     |  
     |  source
     |  
     |  total_download
     |  
     |  total_upload
     |  
     |  up_speed
     |  
     |  upload_limit
     |  
     |  upload_queue_length
     |  
     |  upload_rate_peak
     |  
     |  used_receive_buffer
     |  
     |  used_send_buffer
     |  
     |  write_state
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 344
     |  
     |  bw_disk = 4
     |  
     |  bw_global = 1
     |  
     |  bw_idle = 0
     |  
     |  bw_limit = 1
     |  
     |  bw_network = 2
     |  
     |  bw_torrent = 1
     |  
     |  choked = 2
     |  
     |  connecting = 128
     |  
     |  dht = 2
     |  
     |  endgame_mode = 16384
     |  
     |  handshake = 64
     |  
     |  holepunched = 32768
     |  
     |  interesting = 1
     |  
     |  local_connection = 32
     |  
     |  lsd = 8
     |  
     |  on_parole = 512
     |  
     |  optimistic_unchoke = 2048
     |  
     |  pex = 4
     |  
     |  plaintext_encrypted = 2097152
     |  
     |  queued = 256
     |  
     |  rc4_encrypted = 1048576
     |  
     |  remote_choked = 8
     |  
     |  remote_interested = 4
     |  
     |  resume_data = 16
     |  
     |  seed = 1024
     |  
     |  snubbed = 4096
     |  
     |  standard_bittorrent = 0
     |  
     |  supports_extensions = 16
     |  
     |  tracker = 1
     |  
     |  upload_only = 8192
     |  
     |  web_seed = 1
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_log_alert(peer_alert)
     |  Method resolution order:
     |      peer_log_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  msg(...)
     |      msg( (peer_log_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* msg(libtorrent::peer_log_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_request(Boost.Python.instance)
     |  Method resolution order:
     |      peer_request
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __eq__(...)
     |      __eq__( (peer_request)arg1, (peer_request)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __eq__(libtorrent::peer_request {lvalue},libtorrent::peer_request)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  length
     |  
     |  piece
     |  
     |  start
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_snubbed_alert(peer_alert)
     |  Method resolution order:
     |      peer_snubbed_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class peer_unsnubbed_alert(peer_alert)
     |  Method resolution order:
     |      peer_unsnubbed_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class performance_alert(torrent_alert)
     |  Method resolution order:
     |      performance_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  warning_code
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class performance_warning_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      performance_warning_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  bittyrant_with_no_uplimit = libtorrent.performance_warning_t.bittyrant...
     |  
     |  download_limit_too_low = libtorrent.performance_warning_t.download_lim...
     |  
     |  names = {'bittyrant_with_no_uplimit': libtorrent.performance_warning_t...
     |  
     |  outstanding_disk_buffer_limit_reached = libtorrent.performance_warning...
     |  
     |  outstanding_request_limit_reached = libtorrent.performance_warning_t.o...
     |  
     |  send_buffer_watermark_too_low = libtorrent.performance_warning_t.send_...
     |  
     |  too_few_file_descriptors = libtorrent.performance_warning_t.too_few_fi...
     |  
     |  too_few_outgoing_ports = libtorrent.performance_warning_t.too_few_outg...
     |  
     |  too_high_disk_queue_limit = libtorrent.performance_warning_t.too_high_...
     |  
     |  too_many_optimistic_unchoke_slots = libtorrent.performance_warning_t.t...
     |  
     |  upload_limit_too_low = libtorrent.performance_warning_t.upload_limit_t...
     |  
     |  values = {0: libtorrent.performance_warning_t.outstanding_disk_buffer_...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class picker_log_alert(peer_alert)
     |  Method resolution order:
     |      picker_log_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  blocks(...)
     |      blocks( (picker_log_alert)arg1) -> object :
     |      
     |          C++ signature :
     |              std::vector<libtorrent::piece_block, std::allocator<libtorrent::piece_block> > blocks(libtorrent::picker_log_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  picker_flags
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class piece_finished_alert(torrent_alert)
     |  Method resolution order:
     |      piece_finished_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  piece_index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class pool_file_status(Boost.Python.instance)
     |  Method resolution order:
     |      pool_file_status
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  file_index
     |  
     |  last_use
     |  
     |  open_mode
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 40
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class portmap_alert(alert)
     |  Method resolution order:
     |      portmap_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  external_port
     |  
     |  map_type
     |  
     |  mapping
     |  
     |  type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class portmap_error_alert(alert)
     |  Method resolution order:
     |      portmap_error_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  map_type
     |  
     |  mapping
     |  
     |  msg
     |  
     |  type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class portmap_log_alert(alert)
     |  Method resolution order:
     |      portmap_log_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  map_type
     |  
     |  msg
     |  
     |  type
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class protocol_type(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      protocol_type
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'tcp': libtorrent.protocol_type.tcp, 'udp': libtorrent.protoc...
     |  
     |  tcp = libtorrent.protocol_type.tcp
     |  
     |  udp = libtorrent.protocol_type.udp
     |  
     |  values = {1: libtorrent.protocol_type.udp, 2: libtorrent.protocol_type...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class proxy_settings(Boost.Python.instance)
     |  Method resolution order:
     |      proxy_settings
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hostname
     |  
     |  password
     |  
     |  port
     |  
     |  proxy_hostnames
     |  
     |  proxy_peer_connections
     |  
     |  type
     |  
     |  username
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 120
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class proxy_type(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      proxy_type
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  http = libtorrent.proxy_type.http
     |  
     |  http_pw = libtorrent.proxy_type.http_pw
     |  
     |  i2p_proxy = libtorrent.proxy_type.i2p_proxy
     |  
     |  names = {'http': libtorrent.proxy_type.http, 'http_pw': libtorrent.pro...
     |  
     |  none = libtorrent.proxy_type.none
     |  
     |  socks4 = libtorrent.proxy_type.socks4
     |  
     |  socks5 = libtorrent.proxy_type.socks5
     |  
     |  socks5_pw = libtorrent.proxy_type.socks5_pw
     |  
     |  values = {0: libtorrent.proxy_type.none, 1: libtorrent.proxy_type.sock...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class proxy_type_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      proxy_type_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  http = libtorrent.proxy_type_t.http
     |  
     |  http_pw = libtorrent.proxy_type_t.http_pw
     |  
     |  i2p_proxy = libtorrent.proxy_type_t.i2p_proxy
     |  
     |  names = {'http': libtorrent.proxy_type_t.http, 'http_pw': libtorrent.p...
     |  
     |  none = libtorrent.proxy_type_t.none
     |  
     |  socks4 = libtorrent.proxy_type_t.socks4
     |  
     |  socks5 = libtorrent.proxy_type_t.socks5
     |  
     |  socks5_pw = libtorrent.proxy_type_t.socks5_pw
     |  
     |  values = {0: libtorrent.proxy_type_t.none, 1: libtorrent.proxy_type_t....
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class read_piece_alert(torrent_alert)
     |  Method resolution order:
     |      read_piece_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  buffer
     |  
     |  ec
     |  
     |  piece
     |  
     |  size
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class reannounce_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      reannounce_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  ignore_min_interval = libtorrent.reannounce_flags_t.ignore_min_interva...
     |  
     |  names = {'ignore_min_interval': libtorrent.reannounce_flags_t.ignore_m...
     |  
     |  values = {1: libtorrent.reannounce_flags_t.ignore_min_interval}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class request_dropped_alert(peer_alert)
     |  Method resolution order:
     |      request_dropped_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  block_index
     |  
     |  piece_index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class save_resume_data_alert(torrent_alert)
     |  Method resolution order:
     |      save_resume_data_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  resume_data
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class save_resume_data_failed_alert(torrent_alert)
     |  Method resolution order:
     |      save_resume_data_failed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  msg
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class save_resume_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      save_resume_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  flush_disk_cache = libtorrent.save_resume_flags_t.flush_disk_cache
     |  
     |  names = {'flush_disk_cache': libtorrent.save_resume_flags_t.flush_disk...
     |  
     |  only_if_modified = libtorrent.save_resume_flags_t.only_if_modified
     |  
     |  save_info_dict = libtorrent.save_resume_flags_t.save_info_dict
     |  
     |  values = {1: libtorrent.save_resume_flags_t.flush_disk_cache, 2: libto...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class save_state_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      save_state_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'save_as_map': libtorrent.save_state_flags_t.save_as_map, 'sa...
     |  
     |  save_as_map = libtorrent.save_state_flags_t.save_as_map
     |  
     |  save_dht_proxy = libtorrent.save_state_flags_t.save_dht_proxy
     |  
     |  save_dht_settings = libtorrent.save_state_flags_t.save_dht_settings
     |  
     |  save_dht_state = libtorrent.save_state_flags_t.save_dht_state
     |  
     |  save_encryption_settings = libtorrent.save_state_flags_t.save_encrypti...
     |  
     |  save_i2p_proxy = libtorrent.save_state_flags_t.save_i2p_proxy
     |  
     |  save_peer_proxy = libtorrent.save_state_flags_t.save_peer_proxy
     |  
     |  save_proxy = libtorrent.save_state_flags_t.save_proxy
     |  
     |  save_settings = libtorrent.save_state_flags_t.save_settings
     |  
     |  save_tracker_proxy = libtorrent.save_state_flags_t.save_tracker_proxy
     |  
     |  save_web_proxy = libtorrent.save_state_flags_t.save_web_proxy
     |  
     |  values = {1: libtorrent.save_state_flags_t.save_settings, 2: libtorren...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class scrape_failed_alert(tracker_alert)
     |  Method resolution order:
     |      scrape_failed_alert
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  error_message(...)
     |      error_message( (scrape_failed_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* error_message(libtorrent::scrape_failed_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  msg
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tracker_alert:
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from tracker_alert:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class scrape_reply_alert(tracker_alert)
     |  Method resolution order:
     |      scrape_reply_alert
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  complete
     |  
     |  incomplete
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tracker_alert:
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from tracker_alert:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class seed_choking_algorithm_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      seed_choking_algorithm_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  anti_leech = libtorrent.seed_choking_algorithm_t.anti_leech
     |  
     |  fastest_upload = libtorrent.seed_choking_algorithm_t.fastest_upload
     |  
     |  names = {'anti_leech': libtorrent.seed_choking_algorithm_t.anti_leech,...
     |  
     |  round_robin = libtorrent.seed_choking_algorithm_t.round_robin
     |  
     |  values = {0: libtorrent.seed_choking_algorithm_t.round_robin, 1: libto...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class session(Boost.Python.instance)
     |  Method resolution order:
     |      session
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (dict)settings [, (int)flags=3]) -> object :
     |      
     |          C++ signature :
     |              void* __init__(boost::python::api::object,boost::python::dict [,int=3])
     |      
     |      __init__( (object)arg1 [, (fingerprint)fingerprint=<libtorrent.fingerprint object at 0x7efd941f0040> [, (int)flags=3 [, (int)alert_mask=1]]]) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object* [,libtorrent::fingerprint=<libtorrent.fingerprint object at 0x7efd941f0040> [,int=3 [,unsigned int=1]]])
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  add_dht_node(...)
     |      add_dht_node( (session)arg1, (tuple)arg2) -> None :
     |      
     |          C++ signature :
     |              void add_dht_node(libtorrent::session {lvalue},boost::python::tuple)
     |  
     |  add_dht_router(...)
     |      add_dht_router( (session)arg1, (str)router, (int)port) -> None :
     |      
     |          C++ signature :
     |              void add_dht_router(libtorrent::session {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,int)
     |  
     |  add_extension(...)
     |      add_extension( (session)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void add_extension(libtorrent::session {lvalue},boost::python::api::object)
     |  
     |  add_feed(...)
     |      add_feed( (session)arg1, (dict)arg2) -> feed_handle :
     |      
     |          C++ signature :
     |              libtorrent::feed_handle add_feed(libtorrent::session {lvalue},boost::python::dict)
     |  
     |  add_port_mapping(...)
     |      add_port_mapping( (session)arg1, (protocol_type)arg2, (int)arg3, (int)arg4) -> int :
     |      
     |          C++ signature :
     |              int add_port_mapping(libtorrent::session {lvalue},libtorrent::session_handle::protocol_type,int,int)
     |  
     |  add_torrent(...)
     |      add_torrent( (session)arg1, (dict)arg2) -> torrent_handle :
     |      
     |          C++ signature :
     |              libtorrent::torrent_handle add_torrent(libtorrent::session {lvalue},boost::python::dict)
     |      
     |      add_torrent( (session)arg1, (torrent_info)arg2, (str)arg3 [, (object)resume_data=None [, (storage_mode_t)storage_mode=libtorrent.storage_mode_t.storage_mode_sparse [, (bool)paused=False]]]) -> torrent_handle :
     |      
     |          C++ signature :
     |              libtorrent::torrent_handle add_torrent(libtorrent::session {lvalue},libtorrent::torrent_info,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,libtorrent::entry=None [,libtorrent::storage_mode_t=libtorrent.storage_mode_t.storage_mode_sparse [,bool=False]]])
     |  
     |  apply_settings(...)
     |      apply_settings( (session)arg1, (dict)arg2) -> None :
     |      
     |          C++ signature :
     |              void apply_settings(libtorrent::session {lvalue},boost::python::dict)
     |  
     |  async_add_torrent(...)
     |      async_add_torrent( (session)arg1, (dict)arg2) -> None :
     |      
     |          C++ signature :
     |              void async_add_torrent(libtorrent::session {lvalue},boost::python::dict)
     |  
     |  create_peer_class(...)
     |      create_peer_class( (session)arg1, (str)arg2) -> int :
     |      
     |          C++ signature :
     |              int create_peer_class(libtorrent::session {lvalue},char const*)
     |  
     |  delete_peer_class(...)
     |      delete_peer_class( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void delete_peer_class(libtorrent::session {lvalue},int)
     |  
     |  delete_port_mapping(...)
     |      delete_port_mapping( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void delete_port_mapping(libtorrent::session {lvalue},int)
     |  
     |  dht_announce(...)
     |      dht_announce( (session)arg1, (sha1_hash)arg2, (int)arg3, (int)arg4) -> None :
     |      
     |          C++ signature :
     |              void dht_announce(libtorrent::session {lvalue},libtorrent::sha1_hash,int,int)
     |  
     |  dht_get_immutable_item(...)
     |      dht_get_immutable_item( (session)arg1, (sha1_hash)arg2) -> None :
     |      
     |          C++ signature :
     |              void dht_get_immutable_item(libtorrent::session {lvalue},libtorrent::sha1_hash)
     |  
     |  dht_get_mutable_item(...)
     |      dht_get_mutable_item( (session)arg1, (str)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void dht_get_mutable_item(libtorrent::session {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  dht_get_peers(...)
     |      dht_get_peers( (session)arg1, (sha1_hash)arg2) -> None :
     |      
     |          C++ signature :
     |              void dht_get_peers(libtorrent::session {lvalue},libtorrent::sha1_hash)
     |  
     |  dht_proxy(...)
     |      dht_proxy( (session)arg1) -> proxy_settings :
     |      
     |          C++ signature :
     |              libtorrent::aux::proxy_settings dht_proxy(libtorrent::session {lvalue})
     |  
     |  dht_put_immutable_item(...)
     |      dht_put_immutable_item( (session)arg1, (object)arg2) -> sha1_hash :
     |      
     |          C++ signature :
     |              libtorrent::sha1_hash dht_put_immutable_item(libtorrent::session {lvalue},libtorrent::entry)
     |  
     |  dht_put_mutable_item(...)
     |      dht_put_mutable_item( (session)arg1, (str)arg2, (str)arg3, (str)arg4, (str)arg5) -> None :
     |      
     |          C++ signature :
     |              void dht_put_mutable_item(libtorrent::session {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  dht_state(...)
     |      dht_state( (session)arg1) -> object :
     |      
     |          C++ signature :
     |              libtorrent::entry dht_state(libtorrent::session {lvalue})
     |  
     |  download_rate_limit(...)
     |      download_rate_limit( (session)arg1) -> int :
     |      
     |          C++ signature :
     |              int download_rate_limit(libtorrent::session {lvalue})
     |  
     |  find_torrent(...)
     |      find_torrent( (session)arg1, (sha1_hash)arg2) -> torrent_handle :
     |      
     |          C++ signature :
     |              libtorrent::torrent_handle find_torrent(libtorrent::session {lvalue},libtorrent::sha1_hash)
     |  
     |  get_cache_info(...)
     |      get_cache_info( (session)arg1 [, (torrent_handle)handle=<libtorrent.torrent_handle object at 0x7efd941f02e0> [, (int)flags=0]]) -> cache_status :
     |      
     |          C++ signature :
     |              libtorrent::cache_status get_cache_info(libtorrent::session {lvalue} [,libtorrent::torrent_handle=<libtorrent.torrent_handle object at 0x7efd941f02e0> [,int=0]])
     |      
     |      get_cache_info( (session)arg1, (sha1_hash)arg2) -> list :
     |      
     |          C++ signature :
     |              boost::python::list get_cache_info(libtorrent::session {lvalue},libtorrent::sha1_hash)
     |  
     |  get_cache_status(...)
     |      get_cache_status( (session)arg1) -> cache_status :
     |      
     |          C++ signature :
     |              libtorrent::cache_status get_cache_status(libtorrent::session {lvalue})
     |  
     |  get_dht_settings(...)
     |      get_dht_settings( (session)arg1) -> dht_settings :
     |      
     |          C++ signature :
     |              libtorrent::dht_settings get_dht_settings(libtorrent::session {lvalue})
     |  
     |  get_ip_filter(...)
     |      get_ip_filter( (session)arg1) -> ip_filter :
     |      
     |          C++ signature :
     |              libtorrent::ip_filter get_ip_filter(libtorrent::session {lvalue})
     |  
     |  get_pe_settings(...)
     |      get_pe_settings( (session)arg1) -> pe_settings :
     |      
     |          C++ signature :
     |              libtorrent::pe_settings get_pe_settings(libtorrent::session {lvalue})
     |  
     |  get_peer_class(...)
     |      get_peer_class( (session)arg1, (int)arg2) -> dict :
     |      
     |          C++ signature :
     |              boost::python::dict get_peer_class(libtorrent::session {lvalue},int)
     |  
     |  get_settings(...)
     |      get_settings( (session)arg1) -> dict :
     |      
     |          C++ signature :
     |              boost::python::dict get_settings(libtorrent::session)
     |  
     |  get_torrent_status(...)
     |      get_torrent_status( (session)session, (object)pred [, (int)flags=0]) -> list :
     |      
     |          C++ signature :
     |              boost::python::list get_torrent_status(libtorrent::session {lvalue},boost::python::api::object [,int=0])
     |  
     |  get_torrents(...)
     |      get_torrents( (session)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list get_torrents(libtorrent::session {lvalue})
     |  
     |  i2p_proxy(...)
     |      i2p_proxy( (session)arg1) -> proxy_settings :
     |      
     |          C++ signature :
     |              libtorrent::aux::proxy_settings i2p_proxy(libtorrent::session {lvalue})
     |  
     |  id(...)
     |      id( (session)arg1) -> sha1_hash :
     |      
     |          C++ signature :
     |              libtorrent::sha1_hash id(libtorrent::session {lvalue})
     |  
     |  is_dht_running(...)
     |      is_dht_running( (session)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_dht_running(libtorrent::session {lvalue})
     |  
     |  is_listening(...)
     |      is_listening( (session)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_listening(libtorrent::session {lvalue})
     |  
     |  is_paused(...)
     |      is_paused( (session)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_paused(libtorrent::session {lvalue})
     |  
     |  listen_on(...)
     |      listen_on( (session)arg1, (int)min, (int)max [, (str)interface=None [, (int)flags=0]]) -> None :
     |      
     |          C++ signature :
     |              void listen_on(libtorrent::session {lvalue},int,int [,char const*=None [,int=0]])
     |  
     |  listen_port(...)
     |      listen_port( (session)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned short listen_port(libtorrent::session {lvalue})
     |  
     |  load_state(...)
     |      load_state( (session)arg1, (object)entry [, (int)flags=4294967295]) -> None :
     |      
     |          C++ signature :
     |              void load_state(libtorrent::session {lvalue},libtorrent::entry [,unsigned int=4294967295])
     |  
     |  local_download_rate_limit(...)
     |      local_download_rate_limit( (session)arg1) -> int :
     |      
     |          C++ signature :
     |              int local_download_rate_limit(libtorrent::session {lvalue})
     |  
     |  local_upload_rate_limit(...)
     |      local_upload_rate_limit( (session)arg1) -> int :
     |      
     |          C++ signature :
     |              int local_upload_rate_limit(libtorrent::session {lvalue})
     |  
     |  max_connections(...)
     |      max_connections( (session)arg1) -> int :
     |      
     |          C++ signature :
     |              int max_connections(libtorrent::session {lvalue})
     |  
     |  num_connections(...)
     |      num_connections( (session)arg1) -> int :
     |      
     |          C++ signature :
     |              int num_connections(libtorrent::session {lvalue})
     |  
     |  outgoing_ports(...)
     |      outgoing_ports( (session)arg1, (int)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void outgoing_ports(libtorrent::session {lvalue},int,int)
     |  
     |  pause(...)
     |      pause( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void pause(libtorrent::session {lvalue})
     |  
     |  peer_proxy(...)
     |      peer_proxy( (session)arg1) -> proxy_settings :
     |      
     |          C++ signature :
     |              libtorrent::aux::proxy_settings peer_proxy(libtorrent::session {lvalue})
     |  
     |  pop_alert(...)
     |      pop_alert( (session)arg1) -> object :
     |      
     |          C++ signature :
     |              boost::python::api::object pop_alert(libtorrent::session {lvalue})
     |  
     |  pop_alerts(...)
     |      pop_alerts( (session)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list pop_alerts(libtorrent::session {lvalue})
     |  
     |  post_dht_stats(...)
     |      post_dht_stats( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void post_dht_stats(libtorrent::session {lvalue})
     |  
     |  post_session_stats(...)
     |      post_session_stats( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void post_session_stats(libtorrent::session {lvalue})
     |  
     |  post_torrent_updates(...)
     |      post_torrent_updates( (session)arg1 [, (int)flags=4294967295]) -> None :
     |      
     |          C++ signature :
     |              void post_torrent_updates(libtorrent::session {lvalue} [,unsigned int=4294967295])
     |  
     |  proxy(...)
     |      proxy( (session)arg1) -> proxy_settings :
     |      
     |          C++ signature :
     |              libtorrent::aux::proxy_settings proxy(libtorrent::session {lvalue})
     |  
     |  refresh_torrent_status(...)
     |      refresh_torrent_status( (session)session, (list)torrents [, (int)flags=0]) -> list :
     |      
     |          C++ signature :
     |              boost::python::list refresh_torrent_status(libtorrent::session {lvalue},boost::python::list [,int=0])
     |  
     |  remove_torrent(...)
     |      remove_torrent( (session)arg1, (torrent_handle)arg2 [, (int)option=0]) -> None :
     |      
     |          C++ signature :
     |              void remove_torrent(libtorrent::session {lvalue},libtorrent::torrent_handle [,int=0])
     |  
     |  resume(...)
     |      resume( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void resume(libtorrent::session {lvalue})
     |  
     |  save_state(...)
     |      save_state( (session)entry [, (int)flags=4294967295]) -> object :
     |      
     |          C++ signature :
     |              libtorrent::entry save_state(libtorrent::session [,unsigned int=4294967295])
     |  
     |  set_alert_mask(...)
     |      set_alert_mask( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_alert_mask(libtorrent::session {lvalue},unsigned int)
     |  
     |  set_alert_queue_size_limit(...)
     |      set_alert_queue_size_limit( (session)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              unsigned long set_alert_queue_size_limit(libtorrent::session {lvalue},unsigned long)
     |  
     |  set_dht_proxy(...)
     |      set_dht_proxy( (session)arg1, (proxy_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_dht_proxy(libtorrent::session {lvalue},libtorrent::aux::proxy_settings)
     |  
     |  set_dht_settings(...)
     |      set_dht_settings( (session)arg1, (dht_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_dht_settings(libtorrent::session {lvalue},libtorrent::dht_settings)
     |  
     |  set_download_rate_limit(...)
     |      set_download_rate_limit( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_download_rate_limit(libtorrent::session {lvalue},int)
     |  
     |  set_i2p_proxy(...)
     |      set_i2p_proxy( (session)arg1, (proxy_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_i2p_proxy(libtorrent::session {lvalue},libtorrent::aux::proxy_settings)
     |  
     |  set_ip_filter(...)
     |      set_ip_filter( (session)arg1, (ip_filter)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_ip_filter(libtorrent::session {lvalue},libtorrent::ip_filter)
     |  
     |  set_local_download_rate_limit(...)
     |      set_local_download_rate_limit( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_local_download_rate_limit(libtorrent::session {lvalue},int)
     |  
     |  set_local_upload_rate_limit(...)
     |      set_local_upload_rate_limit( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_local_upload_rate_limit(libtorrent::session {lvalue},int)
     |  
     |  set_max_connections(...)
     |      set_max_connections( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_max_connections(libtorrent::session {lvalue},int)
     |  
     |  set_max_half_open_connections(...)
     |      set_max_half_open_connections( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_max_half_open_connections(libtorrent::session {lvalue},int)
     |  
     |  set_max_uploads(...)
     |      set_max_uploads( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_max_uploads(libtorrent::session {lvalue},int)
     |  
     |  set_pe_settings(...)
     |      set_pe_settings( (session)arg1, (pe_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_pe_settings(libtorrent::session {lvalue},libtorrent::pe_settings)
     |  
     |  set_peer_class(...)
     |      set_peer_class( (session)arg1, (int)arg2, (dict)arg3) -> None :
     |      
     |          C++ signature :
     |              void set_peer_class(libtorrent::session {lvalue},int,boost::python::dict)
     |  
     |  set_peer_class_filter(...)
     |      set_peer_class_filter( (session)arg1, (ip_filter)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_peer_class_filter(libtorrent::session {lvalue},libtorrent::ip_filter)
     |  
     |  set_peer_class_type_filter(...)
     |      set_peer_class_type_filter( (session)arg1, (peer_class_type_filter)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_peer_class_type_filter(libtorrent::session {lvalue},libtorrent::peer_class_type_filter)
     |  
     |  set_peer_id(...)
     |      set_peer_id( (session)arg1, (sha1_hash)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_peer_id(libtorrent::session {lvalue},libtorrent::sha1_hash)
     |  
     |  set_peer_proxy(...)
     |      set_peer_proxy( (session)arg1, (proxy_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_peer_proxy(libtorrent::session {lvalue},libtorrent::aux::proxy_settings)
     |  
     |  set_proxy(...)
     |      set_proxy( (session)arg1, (proxy_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_proxy(libtorrent::session {lvalue},libtorrent::aux::proxy_settings)
     |  
     |  set_settings(...)
     |      set_settings( (session)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_settings(libtorrent::session {lvalue},boost::python::api::object)
     |  
     |  set_severity_level(...)
     |      set_severity_level( (session)arg1, (severity_levels)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_severity_level(libtorrent::session {lvalue},libtorrent::alert::severity_t)
     |  
     |  set_tracker_proxy(...)
     |      set_tracker_proxy( (session)arg1, (proxy_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_tracker_proxy(libtorrent::session {lvalue},libtorrent::aux::proxy_settings)
     |  
     |  set_upload_rate_limit(...)
     |      set_upload_rate_limit( (session)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_upload_rate_limit(libtorrent::session {lvalue},int)
     |  
     |  set_web_seed_proxy(...)
     |      set_web_seed_proxy( (session)arg1, (proxy_settings)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_web_seed_proxy(libtorrent::session {lvalue},libtorrent::aux::proxy_settings)
     |  
     |  settings(...)
     |      settings( (session)arg1) -> session_settings :
     |      
     |          C++ signature :
     |              libtorrent::session_settings settings(libtorrent::session {lvalue})
     |  
     |  start_dht(...)
     |      start_dht( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void start_dht(libtorrent::session {lvalue})
     |      
     |      start_dht( (session)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void start_dht(libtorrent::session {lvalue},libtorrent::entry)
     |  
     |  start_lsd(...)
     |      start_lsd( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void start_lsd(libtorrent::session {lvalue})
     |  
     |  start_natpmp(...)
     |      start_natpmp( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void start_natpmp(libtorrent::session {lvalue})
     |  
     |  start_upnp(...)
     |      start_upnp( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void start_upnp(libtorrent::session {lvalue})
     |  
     |  status(...)
     |      status( (session)arg1) -> session_status :
     |      
     |          C++ signature :
     |              libtorrent::session_status status(libtorrent::session {lvalue})
     |  
     |  stop_dht(...)
     |      stop_dht( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void stop_dht(libtorrent::session {lvalue})
     |  
     |  stop_lsd(...)
     |      stop_lsd( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void stop_lsd(libtorrent::session {lvalue})
     |  
     |  stop_natpmp(...)
     |      stop_natpmp( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void stop_natpmp(libtorrent::session {lvalue})
     |  
     |  stop_upnp(...)
     |      stop_upnp( (session)arg1) -> None :
     |      
     |          C++ signature :
     |              void stop_upnp(libtorrent::session {lvalue})
     |  
     |  tracker_proxy(...)
     |      tracker_proxy( (session)arg1) -> proxy_settings :
     |      
     |          C++ signature :
     |              libtorrent::aux::proxy_settings tracker_proxy(libtorrent::session {lvalue})
     |  
     |  upload_rate_limit(...)
     |      upload_rate_limit( (session)arg1) -> int :
     |      
     |          C++ signature :
     |              int upload_rate_limit(libtorrent::session {lvalue})
     |  
     |  wait_for_alert(...)
     |      wait_for_alert( (session)arg1, (int)arg2) -> alert :
     |      
     |          C++ signature :
     |              boost::shared_ptr<libtorrent::alert> wait_for_alert(libtorrent::session {lvalue},int)
     |  
     |  web_seed_proxy(...)
     |      web_seed_proxy( (session)arg1) -> proxy_settings :
     |      
     |          C++ signature :
     |              libtorrent::aux::proxy_settings web_seed_proxy(libtorrent::session {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  global_peer_class_id = 0
     |  
     |  local_peer_class_id = 2
     |  
     |  tcp_peer_class_id = 1
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class session_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      session_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  add_default_plugins = libtorrent.session_flags_t.add_default_plugins
     |  
     |  names = {'add_default_plugins': libtorrent.session_flags_t.add_default...
     |  
     |  start_default_features = libtorrent.session_flags_t.start_default_feat...
     |  
     |  values = {1: libtorrent.session_flags_t.add_default_plugins, 2: libtor...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class session_settings(Boost.Python.instance)
     |  Method resolution order:
     |      session_settings
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  active_dht_limit
     |  
     |  active_downloads
     |  
     |  active_limit
     |  
     |  active_lsd_limit
     |  
     |  active_seeds
     |  
     |  active_tracker_limit
     |  
     |  alert_queue_size
     |  
     |  allow_i2p_mixed
     |  
     |  allow_multiple_connections_per_ip
     |  
     |  allow_reordered_disk_operations
     |  
     |  allowed_fast_set_size
     |  
     |  always_send_user_agent
     |  
     |  announce_double_nat
     |  
     |  announce_ip
     |  
     |  announce_to_all_tiers
     |  
     |  announce_to_all_trackers
     |  
     |  anonymous_mode
     |  
     |  apply_ip_filter_to_trackers
     |  
     |  auto_manage_interval
     |  
     |  auto_manage_prefer_seeds
     |  
     |  auto_manage_startup
     |  
     |  auto_scrape_interval
     |  
     |  auto_scrape_min_interval
     |  
     |  ban_web_seeds
     |  
     |  broadcast_lsd
     |  
     |  cache_buffer_chunk_size
     |  
     |  cache_expiry
     |  
     |  cache_size
     |  
     |  choking_algorithm
     |  
     |  close_redundant_connections
     |  
     |  coalesce_reads
     |  
     |  coalesce_writes
     |  
     |  connection_speed
     |  
     |  connections_limit
     |  
     |  decrease_est_reciprocation_rate
     |  
     |  default_cache_min_age
     |  
     |  default_est_reciprocation_rate
     |  
     |  dht_announce_interval
     |  
     |  dht_upload_rate_limit
     |  
     |  disable_hash_checks
     |  
     |  disk_cache_algorithm
     |  
     |  disk_io_read_mode
     |  
     |  disk_io_write_mode
     |  
     |  dont_count_slow_torrents
     |  
     |  download_rate_limit
     |  
     |  drop_skipped_requests
     |  
     |  enable_incoming_tcp
     |  
     |  enable_incoming_utp
     |  
     |  enable_outgoing_tcp
     |  
     |  enable_outgoing_utp
     |  
     |  explicit_cache_interval
     |  
     |  explicit_read_cache
     |  
     |  file_checks_delay_per_block
     |  
     |  file_pool_size
     |  
     |  force_proxy
     |  
     |  free_torrent_hashes
     |  
     |  guided_read_cache
     |  
     |  half_open_limit
     |  
     |  handshake_client_version
     |  
     |  handshake_timeout
     |  
     |  ignore_limits_on_local_network
     |  
     |  ignore_resume_timestamps
     |  
     |  inactivity_timeout
     |  
     |  incoming_starts_queued_torrents
     |  
     |  increase_est_reciprocation_rate
     |  
     |  initial_picker_threshold
     |  
     |  lazy_bitfields
     |  
     |  listen_queue_size
     |  
     |  local_download_rate_limit
     |  
     |  local_service_announce_interval
     |  
     |  local_upload_rate_limit
     |  
     |  lock_disk_cache
     |  
     |  lock_files
     |  
     |  low_prio_disk
     |  
     |  max_allowed_in_request_queue
     |  
     |  max_failcount
     |  
     |  max_http_recv_buffer_size
     |  
     |  max_metadata_size
     |  
     |  max_out_request_queue
     |  
     |  max_paused_peerlist_size
     |  
     |  max_peerlist_size
     |  
     |  max_pex_peers
     |  
     |  max_queued_disk_bytes
     |  
     |  max_queued_disk_bytes_low_watermark
     |  
     |  max_rejects
     |  
     |  max_sparse_regions
     |  
     |  max_suggest_pieces
     |  
     |  min_announce_interval
     |  
     |  min_reconnect_time
     |  
     |  mixed_mode_algorithm
     |  
     |  no_atime_storage
     |  
     |  no_connect_privileged_ports
     |  
     |  no_recheck_incomplete_resume
     |  
     |  num_optimistic_unchoke_slots
     |  
     |  num_want
     |  
     |  optimistic_disk_retry
     |  
     |  optimistic_unchoke_interval
     |  
     |  optimize_hashing_for_speed
     |  
     |  peer_connect_timeout
     |  
     |  peer_timeout
     |  
     |  peer_tos
     |  
     |  peer_turnover
     |  
     |  peer_turnover_cutoff
     |  
     |  peer_turnover_interval
     |  
     |  piece_timeout
     |  
     |  prefer_udp_trackers
     |  
     |  prioritize_partial_pieces
     |  
     |  rate_limit_ip_overhead
     |  
     |  rate_limit_utp
     |  
     |  read_cache_line_size
     |  
     |  read_job_every
     |  
     |  recv_socket_buffer_size
     |  
     |  report_redundant_bytes
     |  
     |  report_true_downloaded
     |  
     |  report_web_seed_downloads
     |  
     |  request_queue_time
     |  
     |  request_timeout
     |  
     |  seed_choking_algorithm
     |  
     |  seed_time_limit
     |  
     |  seed_time_ratio_limit
     |  
     |  seeding_outgoing_connections
     |  
     |  seeding_piece_quota
     |  
     |  send_buffer_low_watermark
     |  
     |  send_buffer_watermark
     |  
     |  send_buffer_watermark_factor
     |  
     |  send_redundant_have
     |  
     |  send_socket_buffer_size
     |  
     |  share_mode_target
     |  
     |  share_ratio_limit
     |  
     |  smooth_connects
     |  
     |  ssl_listen
     |  
     |  stop_tracker_timeout
     |  
     |  strict_end_game_mode
     |  
     |  strict_super_seeding
     |  
     |  support_merkle_torrents
     |  
     |  support_share_mode
     |  
     |  tick_interval
     |  
     |  torrent_connect_boost
     |  
     |  tracker_backoff
     |  
     |  tracker_completion_timeout
     |  
     |  tracker_maximum_response_length
     |  
     |  tracker_receive_timeout
     |  
     |  udp_tracker_token_expiry
     |  
     |  unchoke_interval
     |  
     |  unchoke_slots_limit
     |  
     |  upload_rate_limit
     |  
     |  upnp_ignore_nonrouters
     |  
     |  urlseed_pipeline_size
     |  
     |  urlseed_timeout
     |  
     |  urlseed_wait_retry
     |  
     |  use_dht_as_fallback
     |  
     |  use_disk_cache_pool
     |  
     |  use_disk_read_ahead
     |  
     |  use_parole_mode
     |  
     |  use_read_cache
     |  
     |  user_agent
     |  
     |  utp_connect_timeout
     |  
     |  utp_delayed_ack
     |  
     |  utp_dynamic_sock_buf
     |  
     |  utp_fin_resends
     |  
     |  utp_gain_factor
     |  
     |  utp_loss_multiplier
     |  
     |  utp_min_timeout
     |  
     |  utp_num_resends
     |  
     |  utp_syn_resends
     |  
     |  utp_target_delay
     |  
     |  volatile_read_cache
     |  
     |  whole_pieces_threshold
     |  
     |  write_cache_line_size
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 768
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class session_stats_alert(alert)
     |  Method resolution order:
     |      session_stats_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  values
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class session_status(Boost.Python.instance)
     |  Method resolution order:
     |      session_status
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  active_requests
     |  
     |  allowed_upload_slots
     |  
     |  dht_download_rate
     |  
     |  dht_global_nodes
     |  
     |  dht_node_cache
     |  
     |  dht_nodes
     |  
     |  dht_torrents
     |  
     |  dht_total_allocations
     |  
     |  dht_upload_rate
     |  
     |  down_bandwidth_bytes_queue
     |  
     |  down_bandwidth_queue
     |  
     |  download_rate
     |  
     |  has_incoming_connections
     |  
     |  ip_overhead_download_rate
     |  
     |  ip_overhead_upload_rate
     |  
     |  num_peers
     |  
     |  num_unchoked
     |  
     |  optimistic_unchoke_counter
     |  
     |  payload_download_rate
     |  
     |  payload_upload_rate
     |  
     |  total_dht_download
     |  
     |  total_dht_upload
     |  
     |  total_download
     |  
     |  total_failed_bytes
     |  
     |  total_ip_overhead_download
     |  
     |  total_ip_overhead_upload
     |  
     |  total_payload_download
     |  
     |  total_payload_upload
     |  
     |  total_redundant_bytes
     |  
     |  total_tracker_download
     |  
     |  total_tracker_upload
     |  
     |  total_upload
     |  
     |  tracker_download_rate
     |  
     |  tracker_upload_rate
     |  
     |  unchoke_counter
     |  
     |  up_bandwidth_bytes_queue
     |  
     |  up_bandwidth_queue
     |  
     |  upload_rate
     |  
     |  utp_stats
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 424
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class sha1_hash(Boost.Python.instance)
     |  Method resolution order:
     |      sha1_hash
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __eq__(...)
     |      __eq__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __eq__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __hash__(...)
     |      __hash__( (object)arg1) -> int :
     |      
     |          C++ signature :
     |              long __hash__(boost::python::api::object)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |      
     |      __init__( (object)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  __lt__(...)
     |      __lt__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __lt__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __ne__(...)
     |      __ne__( (sha1_hash)arg1, (sha1_hash)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __ne__(libtorrent::sha1_hash {lvalue},libtorrent::sha1_hash)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  __str__(...)
     |      __str__( (sha1_hash)arg1) -> object :
     |      
     |          C++ signature :
     |              _object* __str__(libtorrent::sha1_hash {lvalue})
     |  
     |  clear(...)
     |      clear( (sha1_hash)arg1) -> None :
     |      
     |          C++ signature :
     |              void clear(libtorrent::sha1_hash {lvalue})
     |  
     |  is_all_zeros(...)
     |      is_all_zeros( (sha1_hash)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_all_zeros(libtorrent::sha1_hash {lvalue})
     |  
     |  to_bytes(...)
     |      to_bytes( (sha1_hash)arg1) -> object :
     |      
     |          C++ signature :
     |              bytes to_bytes(libtorrent::sha1_hash)
     |  
     |  to_string(...)
     |      to_string( (sha1_hash)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_string(libtorrent::sha1_hash {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 40
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class socket_type_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      socket_type_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  i2p_socket = libtorrent.socket_type_t.i2p_socket
     |  
     |  names = {'i2p_socket': libtorrent.socket_type_t.i2p_socket, 'ssl_tcp_s...
     |  
     |  ssl_tcp_socket = libtorrent.socket_type_t.ssl_tcp_socket
     |  
     |  ssl_utp_socket = libtorrent.socket_type_t.ssl_utp_socket
     |  
     |  tcp_socket = libtorrent.socket_type_t.tcp_socket
     |  
     |  utp_socket = libtorrent.socket_type_t.utp_socket
     |  
     |  values = {0: libtorrent.socket_type_t.tcp_socket, 1: libtorrent.socket...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class state_changed_alert(torrent_alert)
     |  Method resolution order:
     |      state_changed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  prev_state
     |  
     |  state
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class state_update_alert(alert)
     |  Method resolution order:
     |      state_update_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  status
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class stats_alert(torrent_alert)
     |  Method resolution order:
     |      stats_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  interval
     |  
     |  transferred
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class stats_channel(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      stats_channel
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  download_dht_protocol = libtorrent.stats_channel.download_dht_protocol
     |  
     |  download_ip_protocol = libtorrent.stats_channel.download_ip_protocol
     |  
     |  download_payload = libtorrent.stats_channel.download_payload
     |  
     |  download_protocol = libtorrent.stats_channel.download_protocol
     |  
     |  download_tracker_protocol = libtorrent.stats_channel.download_tracker_...
     |  
     |  names = {'download_dht_protocol': libtorrent.stats_channel.download_dh...
     |  
     |  upload_dht_protocol = libtorrent.stats_channel.upload_dht_protocol
     |  
     |  upload_ip_protocol = libtorrent.stats_channel.upload_ip_protocol
     |  
     |  upload_payload = libtorrent.stats_channel.upload_payload
     |  
     |  upload_protocol = libtorrent.stats_channel.upload_protocol
     |  
     |  upload_tracker_protocol = libtorrent.stats_channel.upload_tracker_prot...
     |  
     |  values = {0: libtorrent.stats_channel.upload_payload, 1: libtorrent.st...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class stats_metric(Boost.Python.instance)
     |  Method resolution order:
     |      stats_metric
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  name
     |  
     |  type
     |  
     |  value_index
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class status_flags_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      status_flags_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'query_accurate_download_counters': libtorrent.status_flags_t...
     |  
     |  query_accurate_download_counters = libtorrent.status_flags_t.query_acc...
     |  
     |  query_distributed_copies = libtorrent.status_flags_t.query_distributed...
     |  
     |  query_last_seen_complete = libtorrent.status_flags_t.query_last_seen_c...
     |  
     |  query_pieces = libtorrent.status_flags_t.query_pieces
     |  
     |  query_verified_pieces = libtorrent.status_flags_t.query_verified_piece...
     |  
     |  values = {1: libtorrent.status_flags_t.query_distributed_copies, 2: li...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class storage_mode_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      storage_mode_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'storage_mode_allocate': libtorrent.storage_mode_t.storage_mo...
     |  
     |  storage_mode_allocate = libtorrent.storage_mode_t.storage_mode_allocat...
     |  
     |  storage_mode_sparse = libtorrent.storage_mode_t.storage_mode_sparse
     |  
     |  values = {0: libtorrent.storage_mode_t.storage_mode_allocate, 1: libto...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class storage_moved_alert(torrent_alert)
     |  Method resolution order:
     |      storage_moved_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  storage_path(...)
     |      storage_path( (storage_moved_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* storage_path(libtorrent::storage_moved_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  path
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class storage_moved_failed_alert(torrent_alert)
     |  Method resolution order:
     |      storage_moved_failed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  file_path(...)
     |      file_path( (storage_moved_failed_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* file_path(libtorrent::storage_moved_failed_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  operation
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class suggest_mode_t(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      suggest_mode_t
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'no_piece_suggestions': libtorrent.suggest_mode_t.no_piece_su...
     |  
     |  no_piece_suggestions = libtorrent.suggest_mode_t.no_piece_suggestions
     |  
     |  suggest_read_cache = libtorrent.suggest_mode_t.suggest_read_cache
     |  
     |  values = {0: libtorrent.suggest_mode_t.no_piece_suggestions, 1: libtor...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class torrent_added_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_added_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_alert(alert)
     |  Method resolution order:
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_checked_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_checked_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_delete_failed_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_delete_failed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  info_hash
     |  
     |  msg
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_deleted_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_deleted_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  info_hash
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_error_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_error_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_finished_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_finished_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_handle(Boost.Python.instance)
     |  Method resolution order:
     |      torrent_handle
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __eq__(...)
     |      __eq__( (torrent_handle)arg1, (torrent_handle)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __eq__(libtorrent::torrent_handle {lvalue},libtorrent::torrent_handle)
     |  
     |  __hash__(...)
     |      __hash__( (torrent_handle)arg1) -> int :
     |      
     |          C++ signature :
     |              unsigned long __hash__(libtorrent::torrent_handle)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __lt__(...)
     |      __lt__( (torrent_handle)arg1, (torrent_handle)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __lt__(libtorrent::torrent_handle {lvalue},libtorrent::torrent_handle)
     |  
     |  __ne__(...)
     |      __ne__( (torrent_handle)arg1, (torrent_handle)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __ne__(libtorrent::torrent_handle {lvalue},libtorrent::torrent_handle)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  add_http_seed(...)
     |      add_http_seed( (torrent_handle)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void add_http_seed(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  add_piece(...)
     |      add_piece( (torrent_handle)arg1, (int)arg2, (str)arg3, (int)arg4) -> None :
     |      
     |          C++ signature :
     |              void add_piece(libtorrent::torrent_handle {lvalue},int,char const*,int)
     |  
     |  add_tracker(...)
     |      add_tracker( (torrent_handle)arg1, (dict)arg2) -> None :
     |      
     |          C++ signature :
     |              void add_tracker(libtorrent::torrent_handle {lvalue},boost::python::dict)
     |  
     |  add_url_seed(...)
     |      add_url_seed( (torrent_handle)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void add_url_seed(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  apply_ip_filter(...)
     |      apply_ip_filter( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void apply_ip_filter(libtorrent::torrent_handle {lvalue},bool)
     |  
     |  auto_managed(...)
     |      auto_managed( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void auto_managed(libtorrent::torrent_handle {lvalue},bool)
     |  
     |  clear_error(...)
     |      clear_error( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void clear_error(libtorrent::torrent_handle {lvalue})
     |  
     |  clear_piece_deadlines(...)
     |      clear_piece_deadlines( (torrent_handle)index) -> None :
     |      
     |          C++ signature :
     |              void clear_piece_deadlines(libtorrent::torrent_handle {lvalue})
     |  
     |  connect_peer(...)
     |      connect_peer( (torrent_handle)arg1, (tuple)ip [, (int)source=0 [, (int)flags=13]]) -> None :
     |      
     |          C++ signature :
     |              void connect_peer(libtorrent::torrent_handle {lvalue},boost::python::tuple [,int=0 [,int=13]])
     |  
     |  download_limit(...)
     |      download_limit( (torrent_handle)arg1) -> int :
     |      
     |          C++ signature :
     |              int download_limit(libtorrent::torrent_handle {lvalue})
     |  
     |  file_priorities(...)
     |      file_priorities( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list file_priorities(libtorrent::torrent_handle {lvalue})
     |  
     |  file_priority(...)
     |      file_priority( (torrent_handle)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              int file_priority(libtorrent::torrent_handle {lvalue},int)
     |      
     |      file_priority( (torrent_handle)arg1, (int)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void file_priority(libtorrent::torrent_handle {lvalue},int,int)
     |  
     |  file_progress(...)
     |      file_progress( (torrent_handle)arg1 [, (int)flags=0]) -> list :
     |      
     |          C++ signature :
     |              boost::python::list file_progress(libtorrent::torrent_handle {lvalue} [,int=0])
     |  
     |  file_status(...)
     |      file_status( (torrent_handle)arg1) -> object :
     |      
     |          C++ signature :
     |              std::vector<libtorrent::pool_file_status, std::allocator<libtorrent::pool_file_status> > file_status(libtorrent::torrent_handle)
     |  
     |  filter_piece(...)
     |      filter_piece( (torrent_handle)arg1, (int)arg2, (bool)arg3) -> None :
     |      
     |          C++ signature :
     |              void filter_piece(libtorrent::torrent_handle {lvalue},int,bool)
     |  
     |  flush_cache(...)
     |      flush_cache( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void flush_cache(libtorrent::torrent_handle {lvalue})
     |  
     |  force_dht_announce(...)
     |      force_dht_announce( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void force_dht_announce(libtorrent::torrent_handle {lvalue})
     |  
     |  force_reannounce(...)
     |      force_reannounce( (torrent_handle)arg1 [, (int)seconds=0 [, (int)tracker_idx=-1 [, (int)flags=0]]]) -> None :
     |      
     |          C++ signature :
     |              void force_reannounce(libtorrent::torrent_handle {lvalue} [,int=0 [,int=-1 [,int=0]]])
     |  
     |  force_recheck(...)
     |      force_recheck( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void force_recheck(libtorrent::torrent_handle {lvalue})
     |  
     |  get_download_queue(...)
     |      get_download_queue( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list get_download_queue(libtorrent::torrent_handle {lvalue})
     |  
     |  get_peer_info(...)
     |      get_peer_info( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list get_peer_info(libtorrent::torrent_handle)
     |  
     |  get_torrent_info(...)
     |      get_torrent_info( (torrent_handle)arg1) -> torrent_info :
     |      
     |          C++ signature :
     |              boost::shared_ptr<libtorrent::torrent_info const> get_torrent_info(libtorrent::torrent_handle)
     |  
     |  has_metadata(...)
     |      has_metadata( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool has_metadata(libtorrent::torrent_handle {lvalue})
     |  
     |  have_piece(...)
     |      have_piece( (torrent_handle)arg1, (int)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool have_piece(libtorrent::torrent_handle {lvalue},int)
     |  
     |  http_seeds(...)
     |      http_seeds( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list http_seeds(libtorrent::torrent_handle {lvalue})
     |  
     |  info_hash(...)
     |      info_hash( (torrent_handle)arg1) -> sha1_hash :
     |      
     |          C++ signature :
     |              libtorrent::sha1_hash info_hash(libtorrent::torrent_handle {lvalue})
     |  
     |  is_auto_managed(...)
     |      is_auto_managed( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_auto_managed(libtorrent::torrent_handle {lvalue})
     |  
     |  is_finished(...)
     |      is_finished( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_finished(libtorrent::torrent_handle {lvalue})
     |  
     |  is_paused(...)
     |      is_paused( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_paused(libtorrent::torrent_handle {lvalue})
     |  
     |  is_piece_filtered(...)
     |      is_piece_filtered( (torrent_handle)arg1, (int)arg2) -> bool :
     |      
     |          C++ signature :
     |              bool is_piece_filtered(libtorrent::torrent_handle {lvalue},int)
     |  
     |  is_seed(...)
     |      is_seed( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_seed(libtorrent::torrent_handle {lvalue})
     |  
     |  is_valid(...)
     |      is_valid( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_valid(libtorrent::torrent_handle {lvalue})
     |  
     |  max_connections(...)
     |      max_connections( (torrent_handle)arg1) -> int :
     |      
     |          C++ signature :
     |              int max_connections(libtorrent::torrent_handle {lvalue})
     |  
     |  max_uploads(...)
     |      max_uploads( (torrent_handle)arg1) -> int :
     |      
     |          C++ signature :
     |              int max_uploads(libtorrent::torrent_handle {lvalue})
     |  
     |  move_storage(...)
     |      move_storage( (torrent_handle)arg1, (str)path [, (int)flags=0]) -> None :
     |      
     |          C++ signature :
     |              void move_storage(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,int=0])
     |      
     |      move_storage( (torrent_handle)arg1, (str)path [, (int)flags=0]) -> None :
     |      
     |          C++ signature :
     |              void move_storage(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > [,int=0])
     |  
     |  name(...)
     |      name( (torrent_handle)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name(libtorrent::torrent_handle {lvalue})
     |  
     |  need_save_resume_data(...)
     |      need_save_resume_data( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool need_save_resume_data(libtorrent::torrent_handle {lvalue})
     |  
     |  pause(...)
     |      pause( (torrent_handle)arg1 [, (int)flags=0]) -> None :
     |      
     |          C++ signature :
     |              void pause(libtorrent::torrent_handle {lvalue} [,int=0])
     |  
     |  piece_availability(...)
     |      piece_availability( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list piece_availability(libtorrent::torrent_handle {lvalue})
     |  
     |  piece_priorities(...)
     |      piece_priorities( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list piece_priorities(libtorrent::torrent_handle {lvalue})
     |  
     |  piece_priority(...)
     |      piece_priority( (torrent_handle)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              int piece_priority(libtorrent::torrent_handle {lvalue},int)
     |      
     |      piece_priority( (torrent_handle)arg1, (int)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void piece_priority(libtorrent::torrent_handle {lvalue},int,int)
     |  
     |  prioritize_files(...)
     |      prioritize_files( (torrent_handle)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void prioritize_files(libtorrent::torrent_handle {lvalue},boost::python::api::object)
     |  
     |  prioritize_pieces(...)
     |      prioritize_pieces( (torrent_handle)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void prioritize_pieces(libtorrent::torrent_handle {lvalue},boost::python::api::object)
     |  
     |  queue_position(...)
     |      queue_position( (torrent_handle)arg1) -> int :
     |      
     |          C++ signature :
     |              int queue_position(libtorrent::torrent_handle {lvalue})
     |  
     |  queue_position_bottom(...)
     |      queue_position_bottom( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void queue_position_bottom(libtorrent::torrent_handle {lvalue})
     |  
     |  queue_position_down(...)
     |      queue_position_down( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void queue_position_down(libtorrent::torrent_handle {lvalue})
     |  
     |  queue_position_top(...)
     |      queue_position_top( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void queue_position_top(libtorrent::torrent_handle {lvalue})
     |  
     |  queue_position_up(...)
     |      queue_position_up( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void queue_position_up(libtorrent::torrent_handle {lvalue})
     |  
     |  read_piece(...)
     |      read_piece( (torrent_handle)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void read_piece(libtorrent::torrent_handle {lvalue},int)
     |  
     |  remove_http_seed(...)
     |      remove_http_seed( (torrent_handle)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void remove_http_seed(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  remove_url_seed(...)
     |      remove_url_seed( (torrent_handle)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void remove_url_seed(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  rename_file(...)
     |      rename_file( (torrent_handle)arg1, (int)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void rename_file(libtorrent::torrent_handle {lvalue},int,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |      
     |      rename_file( (torrent_handle)arg1, (int)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void rename_file(libtorrent::torrent_handle {lvalue},int,std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >)
     |  
     |  replace_trackers(...)
     |      replace_trackers( (torrent_handle)arg1, (object)arg2) -> None :
     |      
     |          C++ signature :
     |              void replace_trackers(libtorrent::torrent_handle {lvalue},boost::python::api::object)
     |  
     |  reset_piece_deadline(...)
     |      reset_piece_deadline( (torrent_handle)arg1, (int)index) -> None :
     |      
     |          C++ signature :
     |              void reset_piece_deadline(libtorrent::torrent_handle {lvalue},int)
     |  
     |  resolve_countries(...)
     |      resolve_countries( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool resolve_countries(libtorrent::torrent_handle {lvalue})
     |      
     |      resolve_countries( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void resolve_countries(libtorrent::torrent_handle {lvalue},bool)
     |  
     |  resume(...)
     |      resume( (torrent_handle)arg1) -> None :
     |      
     |          C++ signature :
     |              void resume(libtorrent::torrent_handle {lvalue})
     |  
     |  save_path(...)
     |      save_path( (torrent_handle)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > save_path(libtorrent::torrent_handle {lvalue})
     |  
     |  save_resume_data(...)
     |      save_resume_data( (torrent_handle)arg1 [, (int)flags=0]) -> None :
     |      
     |          C++ signature :
     |              void save_resume_data(libtorrent::torrent_handle {lvalue} [,int=0])
     |  
     |  scrape_tracker(...)
     |      scrape_tracker( (torrent_handle)arg1 [, (int)index=-1]) -> None :
     |      
     |          C++ signature :
     |              void scrape_tracker(libtorrent::torrent_handle {lvalue} [,int=-1])
     |  
     |  set_download_limit(...)
     |      set_download_limit( (torrent_handle)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_download_limit(libtorrent::torrent_handle {lvalue},int)
     |  
     |  set_max_connections(...)
     |      set_max_connections( (torrent_handle)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_max_connections(libtorrent::torrent_handle {lvalue},int)
     |  
     |  set_max_uploads(...)
     |      set_max_uploads( (torrent_handle)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_max_uploads(libtorrent::torrent_handle {lvalue},int)
     |  
     |  set_metadata(...)
     |      set_metadata( (torrent_handle)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_metadata(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  set_peer_download_limit(...)
     |      set_peer_download_limit( (torrent_handle)arg1, (tuple)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void set_peer_download_limit(libtorrent::torrent_handle {lvalue},boost::python::tuple,int)
     |  
     |  set_peer_upload_limit(...)
     |      set_peer_upload_limit( (torrent_handle)arg1, (tuple)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void set_peer_upload_limit(libtorrent::torrent_handle {lvalue},boost::python::tuple,int)
     |  
     |  set_piece_deadline(...)
     |      set_piece_deadline( (torrent_handle)arg1, (int)index, (int)deadline [, (int)flags=0]) -> None :
     |      
     |          C++ signature :
     |              void set_piece_deadline(libtorrent::torrent_handle {lvalue},int,int [,int=0])
     |  
     |  set_priority(...)
     |      set_priority( (torrent_handle)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_priority(libtorrent::torrent_handle {lvalue},int)
     |  
     |  set_ratio(...)
     |      set_ratio( (torrent_handle)arg1, (float)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_ratio(libtorrent::torrent_handle {lvalue},float)
     |  
     |  set_sequential_download(...)
     |      set_sequential_download( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_sequential_download(libtorrent::torrent_handle {lvalue},bool)
     |  
     |  set_share_mode(...)
     |      set_share_mode( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_share_mode(libtorrent::torrent_handle {lvalue},bool)
     |  
     |  set_ssl_certificate(...)
     |      set_ssl_certificate( (torrent_handle)arg1, (str)cert, (str)private_key, (str)dh_params [, (str)passphrase='']) -> None :
     |      
     |          C++ signature :
     |              void set_ssl_certificate(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >=''])
     |  
     |  set_tracker_login(...)
     |      set_tracker_login( (torrent_handle)arg1, (str)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void set_tracker_login(libtorrent::torrent_handle {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |  
     |  set_upload_limit(...)
     |      set_upload_limit( (torrent_handle)arg1, (int)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_upload_limit(libtorrent::torrent_handle {lvalue},int)
     |  
     |  set_upload_mode(...)
     |      set_upload_mode( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_upload_mode(libtorrent::torrent_handle {lvalue},bool)
     |  
     |  status(...)
     |      status( (torrent_handle)arg1 [, (int)flags=4294967295]) -> torrent_status :
     |      
     |          C++ signature :
     |              libtorrent::torrent_status status(libtorrent::torrent_handle {lvalue} [,unsigned int=4294967295])
     |  
     |  stop_when_ready(...)
     |      stop_when_ready( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void stop_when_ready(libtorrent::torrent_handle {lvalue},bool)
     |  
     |  super_seeding(...)
     |      super_seeding( (torrent_handle)arg1, (bool)arg2) -> None :
     |      
     |          C++ signature :
     |              void super_seeding(libtorrent::torrent_handle {lvalue},bool)
     |      
     |      super_seeding( (torrent_handle)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool super_seeding(libtorrent::torrent_handle {lvalue})
     |  
     |  torrent_file(...)
     |      torrent_file( (torrent_handle)arg1) -> torrent_info :
     |      
     |          C++ signature :
     |              boost::shared_ptr<libtorrent::torrent_info const> torrent_file(libtorrent::torrent_handle {lvalue})
     |  
     |  trackers(...)
     |      trackers( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list trackers(libtorrent::torrent_handle {lvalue})
     |  
     |  upload_limit(...)
     |      upload_limit( (torrent_handle)arg1) -> int :
     |      
     |          C++ signature :
     |              int upload_limit(libtorrent::torrent_handle {lvalue})
     |  
     |  url_seeds(...)
     |      url_seeds( (torrent_handle)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list url_seeds(libtorrent::torrent_handle {lvalue})
     |  
     |  use_interface(...)
     |      use_interface( (torrent_handle)arg1, (str)arg2) -> None :
     |      
     |          C++ signature :
     |              void use_interface(libtorrent::torrent_handle {lvalue},char const*)
     |  
     |  write_resume_data(...)
     |      write_resume_data( (torrent_handle)arg1) -> object :
     |      
     |          C++ signature :
     |              libtorrent::entry write_resume_data(libtorrent::torrent_handle {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 32
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_info(Boost.Python.instance)
     |  Method resolution order:
     |      torrent_info
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      __init__( (object)arg1, (sha1_hash)info_hash [, (int)flags=0]) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,libtorrent::sha1_hash [,int=0])
     |      
     |      __init__( (object)arg1, (object)arg2 [, (int)arg3]) -> object :
     |      
     |          C++ signature :
     |              void* __init__(boost::python::api::object,libtorrent::entry [,int])
     |      
     |      __init__( (object)arg1, (str)arg2, (int)arg3 [, (int)arg4]) -> object :
     |      
     |          C++ signature :
     |              void* __init__(boost::python::api::object,char const*,int [,int])
     |      
     |      __init__( (object)arg1, (str)arg2 [, (int)arg3]) -> object :
     |      
     |          C++ signature :
     |              void* __init__(boost::python::api::object,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,int])
     |      
     |      __init__( (object)arg1, (torrent_info)ti) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,libtorrent::torrent_info)
     |      
     |      __init__( (object)arg1, (str)file [, (int)flags=0]) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*,std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > [,int=0])
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  add_http_seed(...)
     |      add_http_seed( (torrent_info)arg1, (str)arg2, (str)arg3, (object)arg4) -> None :
     |      
     |          C++ signature :
     |              void add_http_seed(libtorrent::torrent_info {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >)
     |  
     |  add_node(...)
     |      add_node( (torrent_info)arg1, (str)arg2, (int)arg3) -> None :
     |      
     |          C++ signature :
     |              void add_node(libtorrent::torrent_info {lvalue},char const*,int)
     |  
     |  add_tracker(...)
     |      add_tracker( (torrent_info)arg1, (str)arg2, (int)url) -> None :
     |      
     |          C++ signature :
     |              void add_tracker(libtorrent::torrent_info {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,int)
     |  
     |  add_url_seed(...)
     |      add_url_seed( (torrent_info)arg1, (str)arg2, (str)arg3, (object)arg4) -> None :
     |      
     |          C++ signature :
     |              void add_url_seed(libtorrent::torrent_info {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >)
     |  
     |  collections(...)
     |      collections( (torrent_info)arg1) -> object :
     |      
     |          C++ signature :
     |              std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > collections(libtorrent::torrent_info {lvalue})
     |  
     |  comment(...)
     |      comment( (torrent_info)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > comment(libtorrent::torrent_info {lvalue})
     |  
     |  creation_date(...)
     |      creation_date( (torrent_info)arg1) -> object :
     |      
     |          C++ signature :
     |              boost::optional<long> creation_date(libtorrent::torrent_info {lvalue})
     |  
     |  creator(...)
     |      creator( (torrent_info)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > creator(libtorrent::torrent_info {lvalue})
     |  
     |  file_at(...)
     |      file_at( (torrent_info)arg1, (int)arg2) -> file_entry :
     |      
     |          C++ signature :
     |              libtorrent::file_entry file_at(libtorrent::torrent_info {lvalue},int)
     |  
     |  file_at_offset(...)
     |      file_at_offset( (torrent_info)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              __gnu_cxx::__normal_iterator<libtorrent::internal_file_entry const*, std::vector<libtorrent::internal_file_entry, std::allocator<libtorrent::internal_file_entry> > > file_at_offset(libtorrent::torrent_info {lvalue},long)
     |  
     |  files(...)
     |      files( (torrent_info)arg1) -> file_storage :
     |      
     |          C++ signature :
     |              libtorrent::file_storage files(libtorrent::torrent_info {lvalue})
     |  
     |  hash_for_piece(...)
     |      hash_for_piece( (torrent_info)arg1, (int)arg2) -> object :
     |      
     |          C++ signature :
     |              bytes hash_for_piece(libtorrent::torrent_info,int)
     |  
     |  info_hash(...)
     |      info_hash( (torrent_info)arg1) -> sha1_hash :
     |      
     |          C++ signature :
     |              libtorrent::sha1_hash info_hash(libtorrent::torrent_info {lvalue})
     |  
     |  is_i2p(...)
     |      is_i2p( (torrent_info)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_i2p(libtorrent::torrent_info {lvalue})
     |  
     |  is_merkle_torrent(...)
     |      is_merkle_torrent( (torrent_info)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_merkle_torrent(libtorrent::torrent_info {lvalue})
     |  
     |  is_valid(...)
     |      is_valid( (torrent_info)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool is_valid(libtorrent::torrent_info {lvalue})
     |  
     |  map_block(...)
     |      map_block( (torrent_info)arg1, (int)arg2, (int)arg3, (int)arg4) -> list :
     |      
     |          C++ signature :
     |              boost::python::list map_block(libtorrent::torrent_info {lvalue},int,long,int)
     |  
     |  map_file(...)
     |      map_file( (torrent_info)arg1, (int)arg2, (int)arg3, (int)arg4) -> peer_request :
     |      
     |          C++ signature :
     |              libtorrent::peer_request map_file(libtorrent::torrent_info {lvalue},int,long,int)
     |  
     |  merkle_tree(...)
     |      merkle_tree( (torrent_info)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list merkle_tree(libtorrent::torrent_info)
     |  
     |  metadata(...)
     |      metadata( (torrent_info)arg1) -> object :
     |      
     |          C++ signature :
     |              bytes metadata(libtorrent::torrent_info)
     |  
     |  metadata_size(...)
     |      metadata_size( (torrent_info)arg1) -> int :
     |      
     |          C++ signature :
     |              int metadata_size(libtorrent::torrent_info {lvalue})
     |  
     |  name(...)
     |      name( (torrent_info)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name(libtorrent::torrent_info {lvalue})
     |  
     |  nodes(...)
     |      nodes( (torrent_info)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list nodes(libtorrent::torrent_info)
     |  
     |  num_files(...)
     |      num_files( (torrent_info)arg1) -> int :
     |      
     |          C++ signature :
     |              int num_files(libtorrent::torrent_info {lvalue})
     |  
     |  num_pieces(...)
     |      num_pieces( (torrent_info)arg1) -> int :
     |      
     |          C++ signature :
     |              int num_pieces(libtorrent::torrent_info {lvalue})
     |  
     |  orig_files(...)
     |      orig_files( (torrent_info)arg1) -> file_storage :
     |      
     |          C++ signature :
     |              libtorrent::file_storage orig_files(libtorrent::torrent_info {lvalue})
     |  
     |  piece_length(...)
     |      piece_length( (torrent_info)arg1) -> int :
     |      
     |          C++ signature :
     |              int piece_length(libtorrent::torrent_info {lvalue})
     |  
     |  piece_size(...)
     |      piece_size( (torrent_info)arg1, (int)arg2) -> int :
     |      
     |          C++ signature :
     |              int piece_size(libtorrent::torrent_info {lvalue},int)
     |  
     |  priv(...)
     |      priv( (torrent_info)arg1) -> bool :
     |      
     |          C++ signature :
     |              bool priv(libtorrent::torrent_info {lvalue})
     |  
     |  remap_files(...)
     |      remap_files( (torrent_info)arg1, (file_storage)arg2) -> None :
     |      
     |          C++ signature :
     |              void remap_files(libtorrent::torrent_info {lvalue},libtorrent::file_storage)
     |  
     |  rename_file(...)
     |      rename_file( (torrent_info)arg1, (int)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void rename_file(libtorrent::torrent_info {lvalue},int,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
     |      
     |      rename_file( (torrent_info)arg1, (int)arg2, (str)arg3) -> None :
     |      
     |          C++ signature :
     |              void rename_file(libtorrent::torrent_info {lvalue},int,std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >)
     |  
     |  set_merkle_tree(...)
     |      set_merkle_tree( (torrent_info)arg1, (list)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_merkle_tree(libtorrent::torrent_info {lvalue},boost::python::list)
     |  
     |  set_web_seeds(...)
     |      set_web_seeds( (torrent_info)arg1, (list)arg2) -> None :
     |      
     |          C++ signature :
     |              void set_web_seeds(libtorrent::torrent_info {lvalue},boost::python::list)
     |  
     |  similar_torrents(...)
     |      similar_torrents( (torrent_info)arg1) -> object :
     |      
     |          C++ signature :
     |              std::vector<libtorrent::sha1_hash, std::allocator<libtorrent::sha1_hash> > similar_torrents(libtorrent::torrent_info {lvalue})
     |  
     |  ssl_cert(...)
     |      ssl_cert( (torrent_info)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ssl_cert(libtorrent::torrent_info {lvalue})
     |  
     |  total_size(...)
     |      total_size( (torrent_info)arg1) -> int :
     |      
     |          C++ signature :
     |              long total_size(libtorrent::torrent_info {lvalue})
     |  
     |  trackers(...)
     |      trackers( (object)arg1) -> object :
     |      
     |          C++ signature :
     |              boost::python::objects::iterator_range<boost::python::return_value_policy<boost::python::return_by_value, boost::python::default_call_policies>, __gnu_cxx::__normal_iterator<libtorrent::announce_entry const*, std::vector<libtorrent::announce_entry, std::allocator<libtorrent::announce_entry> > > > trackers(boost::python::back_reference<libtorrent::torrent_info&>)
     |  
     |  web_seeds(...)
     |      web_seeds( (torrent_info)arg1) -> list :
     |      
     |          C++ signature :
     |              boost::python::list web_seeds(libtorrent::torrent_info)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_log_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_log_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  msg(...)
     |      msg( (torrent_log_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* msg(libtorrent::torrent_log_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_need_cert_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_need_cert_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_paused_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_paused_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_removed_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_removed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  info_hash
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_resumed_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_resumed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_status(Boost.Python.instance)
     |  Method resolution order:
     |      torrent_status
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __eq__(...)
     |      __eq__( (torrent_status)arg1, (torrent_status)arg2) -> object :
     |      
     |          C++ signature :
     |              _object* __eq__(libtorrent::torrent_status {lvalue},libtorrent::torrent_status)
     |  
     |  __init__(...)
     |      __init__( (object)arg1) -> None :
     |      
     |          C++ signature :
     |              void __init__(_object*)
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  active_time
     |  
     |  added_time
     |  
     |  all_time_download
     |  
     |  all_time_upload
     |  
     |  announce_interval
     |  
     |  announcing_to_dht
     |  
     |  announcing_to_lsd
     |  
     |  announcing_to_trackers
     |  
     |  auto_managed
     |  
     |  block_size
     |  
     |  completed_time
     |  
     |  connect_candidates
     |  
     |  connections_limit
     |  
     |  current_tracker
     |  
     |  distributed_copies
     |  
     |  distributed_fraction
     |  
     |  distributed_full_copies
     |  
     |  down_bandwidth_queue
     |  
     |  download_payload_rate
     |  
     |  download_rate
     |  
     |  errc
     |  
     |  error
     |  
     |  error_file
     |  
     |  finished_time
     |  
     |  handle
     |  
     |  has_incoming
     |  
     |  has_metadata
     |  
     |  info_hash
     |  
     |  ip_filter_applies
     |  
     |  is_finished
     |  
     |  is_loaded
     |  
     |  is_seeding
     |  
     |  last_scrape
     |  
     |  last_seen_complete
     |  
     |  list_peers
     |  
     |  list_seeds
     |  
     |  moving_storage
     |  
     |  name
     |  
     |  need_save_resume
     |  
     |  next_announce
     |  
     |  num_complete
     |  
     |  num_connections
     |  
     |  num_incomplete
     |  
     |  num_peers
     |  
     |  num_pieces
     |  
     |  num_seeds
     |  
     |  num_uploads
     |  
     |  paused
     |  
     |  pieces
     |  
     |  priority
     |  
     |  progress
     |  
     |  progress_ppm
     |  
     |  queue_position
     |  
     |  save_path
     |  
     |  seed_mode
     |  
     |  seed_rank
     |  
     |  seeding_time
     |  
     |  sequential_download
     |  
     |  share_mode
     |  
     |  state
     |  
     |  stop_when_ready
     |  
     |  storage_mode
     |  
     |  super_seeding
     |  
     |  time_since_download
     |  
     |  time_since_upload
     |  
     |  torrent_file
     |  
     |  total_done
     |  
     |  total_download
     |  
     |  total_failed_bytes
     |  
     |  total_payload_download
     |  
     |  total_payload_upload
     |  
     |  total_redundant_bytes
     |  
     |  total_upload
     |  
     |  total_wanted
     |  
     |  total_wanted_done
     |  
     |  up_bandwidth_queue
     |  
     |  upload_mode
     |  
     |  upload_payload_rate
     |  
     |  upload_rate
     |  
     |  uploads_limit
     |  
     |  verified_pieces
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __instance_size__ = 528
     |  
     |  allocating = libtorrent.states.allocating
     |  
     |  checking_files = libtorrent.states.checking_files
     |  
     |  checking_resume_data = libtorrent.states.checking_resume_data
     |  
     |  downloading = libtorrent.states.downloading
     |  
     |  downloading_metadata = libtorrent.states.downloading_metadata
     |  
     |  finished = libtorrent.states.finished
     |  
     |  queued_for_checking = libtorrent.states.queued_for_checking
     |  
     |  seeding = libtorrent.states.seeding
     |  
     |  states = <class 'libtorrent.states'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class torrent_update_alert(torrent_alert)
     |  Method resolution order:
     |      torrent_update_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  new_ih
     |  
     |  old_ih
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class tracker_alert(torrent_alert)
     |  Method resolution order:
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class tracker_announce_alert(tracker_alert)
     |  Method resolution order:
     |      tracker_announce_alert
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  event
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tracker_alert:
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from tracker_alert:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class tracker_error_alert(tracker_alert)
     |  Method resolution order:
     |      tracker_error_alert
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  error_message(...)
     |      error_message( (tracker_error_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* error_message(libtorrent::tracker_error_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  msg
     |  
     |  status_code
     |  
     |  times_in_row
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tracker_alert:
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from tracker_alert:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class tracker_reply_alert(tracker_alert)
     |  Method resolution order:
     |      tracker_reply_alert
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  num_peers
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tracker_alert:
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from tracker_alert:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class tracker_source(Boost.Python.enum)
     |  int([x]) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Method resolution order:
     |      tracker_source
     |      Boost.Python.enum
     |      builtins.int
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  names = {'source_client': libtorrent.tracker_source.source_client, 'so...
     |  
     |  source_client = libtorrent.tracker_source.source_client
     |  
     |  source_magnet_link = libtorrent.tracker_source.source_magnet_link
     |  
     |  source_tex = libtorrent.tracker_source.source_tex
     |  
     |  source_torrent = libtorrent.tracker_source.source_torrent
     |  
     |  values = {1: libtorrent.tracker_source.source_torrent, 2: libtorrent.t...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.int:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(self, format_spec, /)
     |      Default object formatter.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(self, /)
     |      Returns size in memory, in bytes.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  as_integer_ratio(self, /)
     |      Return integer ratio.
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original int
     |      and with a positive denominator.
     |      
     |      >>> (10).as_integer_ratio()
     |      (10, 1)
     |      >>> (-10).as_integer_ratio()
     |      (-10, 1)
     |      >>> (0).as_integer_ratio()
     |      (0, 1)
     |  
     |  bit_length(self, /)
     |      Number of bits necessary to represent self in binary.
     |      
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  to_bytes(self, /, length, byteorder, *, signed=False)
     |      Return an array of bytes representing an integer.
     |      
     |      length
     |        Length of bytes object to use.  An OverflowError is raised if the
     |        integer is not representable with the given number of bytes.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Determines whether two's complement is used to represent the integer.
     |        If signed is False and a negative integer is given, an OverflowError
     |        is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.int:
     |  
     |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
     |      Return the integer represented by the given array of bytes.
     |      
     |      bytes
     |        Holds the array of bytes to convert.  The argument must either
     |        support the buffer protocol or be an iterable object producing bytes.
     |        Bytes and bytearray are examples of built-in objects that support the
     |        buffer protocol.
     |      byteorder
     |        The byte order used to represent the integer.  If byteorder is 'big',
     |        the most significant byte is at the beginning of the byte array.  If
     |        byteorder is 'little', the most significant byte is at the end of the
     |        byte array.  To request the native byte order of the host system, use
     |        `sys.byteorder' as the byte order value.
     |      signed
     |        Indicates whether two's complement is used to represent the integer.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.int:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.int:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number
    
    class tracker_warning_alert(tracker_alert)
     |  Method resolution order:
     |      tracker_warning_alert
     |      tracker_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from tracker_alert:
     |  
     |  tracker_url(...)
     |      tracker_url( (tracker_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* tracker_url(libtorrent::tracker_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from tracker_alert:
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class udp_error_alert(alert)
     |  Method resolution order:
     |      udp_error_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  endpoint
     |  
     |  error
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class unwanted_block_alert(peer_alert)
     |  Method resolution order:
     |      unwanted_block_alert
     |      peer_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  block_index
     |  
     |  piece_index
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from peer_alert:
     |  
     |  ip
     |  
     |  pid
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__
    
    class url_seed_alert(torrent_alert)
     |  Method resolution order:
     |      url_seed_alert
     |      torrent_alert
     |      alert
     |      Boost.Python.instance
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __init__(...)
     |      Raises an exception
     |      This class cannot be instantiated from Python
     |  
     |  __reduce__ = <unnamed Boost.Python function>(...)
     |  
     |  error_message(...)
     |      error_message( (url_seed_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* error_message(libtorrent::url_seed_alert {lvalue})
     |  
     |  server_url(...)
     |      server_url( (url_seed_alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* server_url(libtorrent::url_seed_alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  error
     |  
     |  msg
     |  
     |  url
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from torrent_alert:
     |  
     |  handle
     |  
     |  torrent_name
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from alert:
     |  
     |  __str__(...)
     |      __str__( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __str__(libtorrent::alert {lvalue})
     |  
     |  category(...)
     |      category( (alert)arg1) -> int :
     |      
     |          C++ signature :
     |              int category(libtorrent::alert {lvalue})
     |  
     |  message(...)
     |      message( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > message(libtorrent::alert {lvalue})
     |  
     |  severity(...)
     |      severity( (alert)arg1) -> severity_levels :
     |      
     |          C++ signature :
     |              libtorrent::alert::severity_t severity(libtorrent::alert {lvalue})
     |  
     |  what(...)
     |      what( (alert)arg1) -> str :
     |      
     |          C++ signature :
     |              char const* what(libtorrent::alert {lvalue})
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from alert:
     |  
     |  category_t = <class 'libtorrent.category_t'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  severity_levels = <class 'libtorrent.severity_levels'>
     |      int([x]) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Boost.Python.instance:
     |  
     |  __new__(*args, **kwargs) from Boost.Python.class
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  __dict__
     |  
     |  __weakref__

FUNCTIONS
    add_files(...)
        add_files( (file_storage)fs, (str)path [, (int)flags=0]) -> None :
        
            C++ signature :
                void add_files(libtorrent::file_storage {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,unsigned int=0])
        
        add_files( (file_storage)fs, (str)path, (object)predicate [, (int)flags=0]) -> None :
        
            C++ signature :
                void add_files(libtorrent::file_storage {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,unsigned int=0])
    
    add_magnet_uri(...)
        add_magnet_uri( (session)arg1, (str)arg2, (dict)arg3) -> torrent_handle :
        
            C++ signature :
                libtorrent::torrent_handle add_magnet_uri(libtorrent::session {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::dict)
    
    bdecode(...)
        bdecode( (object)arg1) -> object :
        
            C++ signature :
                libtorrent::entry bdecode(bytes)
    
    bdecode_category(...)
        bdecode_category() -> error_category :
        
            C++ signature :
                category_holder bdecode_category()
    
    bencode(...)
        bencode( (object)arg1) -> object :
        
            C++ signature :
                bytes bencode(libtorrent::entry)
    
    client_fingerprint(...)
        client_fingerprint( (sha1_hash)arg1) -> object :
        
            C++ signature :
                boost::python::api::object client_fingerprint(libtorrent::sha1_hash)
    
    default_settings(...)
        default_settings() -> dict :
        
            C++ signature :
                boost::python::dict default_settings()
    
    find_metric_idx(...)
        find_metric_idx( (str)arg1) -> int :
        
            C++ signature :
                int find_metric_idx(char const*)
    
    generate_fingerprint(...)
        generate_fingerprint( (str)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> str :
        
            C++ signature :
                std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > generate_fingerprint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,int,int,int,int)
    
    generic_category(...)
        generic_category() -> error_category :
        
            C++ signature :
                category_holder generic_category()
    
    get_bdecode_category(...)
        get_bdecode_category() -> error_category :
        
            C++ signature :
                category_holder get_bdecode_category()
    
    get_http_category(...)
        get_http_category() -> error_category :
        
            C++ signature :
                category_holder get_http_category()
    
    get_i2p_category(...)
        get_i2p_category() -> error_category :
        
            C++ signature :
                category_holder get_i2p_category()
    
    get_libtorrent_category(...)
        get_libtorrent_category() -> error_category :
        
            C++ signature :
                category_holder get_libtorrent_category()
    
    get_socks_category(...)
        get_socks_category() -> error_category :
        
            C++ signature :
                category_holder get_socks_category()
    
    get_upnp_category(...)
        get_upnp_category() -> error_category :
        
            C++ signature :
                category_holder get_upnp_category()
    
    high_performance_seed(...)
        high_performance_seed() -> session_settings :
        
            C++ signature :
                libtorrent::session_settings high_performance_seed()
        
        high_performance_seed() -> dict :
        
            C++ signature :
                boost::python::dict high_performance_seed()
    
    http_category(...)
        http_category() -> error_category :
        
            C++ signature :
                category_holder http_category()
    
    i2p_category(...)
        i2p_category() -> error_category :
        
            C++ signature :
                category_holder i2p_category()
    
    identify_client(...)
        identify_client( (sha1_hash)arg1) -> str :
        
            C++ signature :
                std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > identify_client(libtorrent::sha1_hash)
    
    libtorrent_category(...)
        libtorrent_category() -> error_category :
        
            C++ signature :
                category_holder libtorrent_category()
    
    make_magnet_uri(...)
        make_magnet_uri( (torrent_handle)arg1) -> str :
        
            C++ signature :
                std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > make_magnet_uri(libtorrent::torrent_handle)
        
        make_magnet_uri( (torrent_info)arg1) -> str :
        
            C++ signature :
                std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > make_magnet_uri(libtorrent::torrent_info)
    
    min_memory_usage(...)
        min_memory_usage() -> session_settings :
        
            C++ signature :
                libtorrent::session_settings min_memory_usage()
        
        min_memory_usage() -> dict :
        
            C++ signature :
                boost::python::dict min_memory_usage()
    
    parse_magnet_uri(...)
        parse_magnet_uri( (str)arg1) -> dict :
        
            C++ signature :
                boost::python::dict parse_magnet_uri(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
    
    parse_magnet_uri_dict(...)
        parse_magnet_uri_dict( (str)arg1) -> dict :
        
            C++ signature :
                boost::python::dict parse_magnet_uri_dict(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
    
    session_stats_metrics(...)
        session_stats_metrics() -> object :
        
            C++ signature :
                std::vector<libtorrent::stats_metric, std::allocator<libtorrent::stats_metric> > session_stats_metrics()
    
    set_piece_hashes(...)
        set_piece_hashes( (create_torrent)arg1, (str)arg2) -> None :
        
            C++ signature :
                void set_piece_hashes(libtorrent::create_torrent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
        
        set_piece_hashes( (create_torrent)arg1, (str)arg2, (object)arg3) -> None :
        
            C++ signature :
                void set_piece_hashes(libtorrent::create_torrent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object)
    
    socks_category(...)
        socks_category() -> error_category :
        
            C++ signature :
                category_holder socks_category()
    
    system_category(...)
        system_category() -> error_category :
        
            C++ signature :
                category_holder system_category()
    
    upnp_category(...)
        upnp_category() -> error_category :
        
            C++ signature :
                category_holder upnp_category()

DATA
    create_metadata_plugin = 'metadata_transfer'
    create_smart_ban_plugin = 'smart_ban'
    create_ut_metadata_plugin = 'ut_metadata'
    create_ut_pex_plugin = 'ut_pex'
    version = '1.1.13.0'
    version_major = 1
    version_minor = 1

VERSION
    1.1.13.0

FILE
    /usr/lib/python3/dist-packages/libtorrent.cpython-38-x86_64-linux-gnu.so


